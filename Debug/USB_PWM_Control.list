
USB_PWM_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008af0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008cb8  08008cb8  00018cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dac  08008dac  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08008dac  08008dac  00018dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008db4  08008db4  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008db4  08008db4  00018db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db8  08008db8  00018db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08008dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b4c  20000170  08008f2c  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cbc  08008f2c  00021cbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d11  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003218  00000000  00000000  00034eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  000380d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f49  00000000  00000000  0003a278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016928  00000000  00000000  000631c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efa13  00000000  00000000  00079ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001694fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b38  00000000  00000000  0016954c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000170 	.word	0x20000170
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008ca0 	.word	0x08008ca0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000174 	.word	0x20000174
 8000204:	08008ca0 	.word	0x08008ca0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <Serial_Init>:
#include "math.h"

extern uint16_t New_CCR_Public;


void Serial_Init(Message_Handling* name){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	name->CCR_Change_Request_Check = 0;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
	memcpy(name->CCR_Request_Text, "Please enter new CCR value (0-65535):\r", 39);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3301      	adds	r3, #1
 800051e:	2227      	movs	r2, #39	; 0x27
 8000520:	491d      	ldr	r1, [pc, #116]	; (8000598 <Serial_Init+0x8c>)
 8000522:	4618      	mov	r0, r3
 8000524:	f008 faa8 	bl	8008a78 <memcpy>
	memcpy(name->CCR_Change_Code, "change.CCR\r", 12);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3328      	adds	r3, #40	; 0x28
 800052c:	220c      	movs	r2, #12
 800052e:	491b      	ldr	r1, [pc, #108]	; (800059c <Serial_Init+0x90>)
 8000530:	4618      	mov	r0, r3
 8000532:	f008 faa1 	bl	8008a78 <memcpy>
	name->Listening_For_CCR = 0;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	name->Message_Received = 0;
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2200      	movs	r2, #0
 8000542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	memcpy(name->Serial_Not_Understood, "I'm sorry, I don't understand your request.", 43);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3336      	adds	r3, #54	; 0x36
 800054a:	222b      	movs	r2, #43	; 0x2b
 800054c:	4914      	ldr	r1, [pc, #80]	; (80005a0 <Serial_Init+0x94>)
 800054e:	4618      	mov	r0, r3
 8000550:	f008 fa92 	bl	8008a78 <memcpy>
	name->is_command = 0;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2200      	movs	r2, #0
 8000558:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	name->CCR_Request_Value = 0;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2200      	movs	r2, #0
 8000560:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	memcpy(name->Command_Not_Recognised, "I'm sorry, I don't recognise that command.", 42);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3364      	adds	r3, #100	; 0x64
 8000568:	222a      	movs	r2, #42	; 0x2a
 800056a:	490e      	ldr	r1, [pc, #56]	; (80005a4 <Serial_Init+0x98>)
 800056c:	4618      	mov	r0, r3
 800056e:	f008 fa83 	bl	8008a78 <memcpy>
	memcpy(name->New_CCR_Is, "New CCR is:", 11);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	338e      	adds	r3, #142	; 0x8e
 8000576:	220b      	movs	r2, #11
 8000578:	490b      	ldr	r1, [pc, #44]	; (80005a8 <Serial_Init+0x9c>)
 800057a:	4618      	mov	r0, r3
 800057c:	f008 fa7c 	bl	8008a78 <memcpy>
	name->New_CCR = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
	name->New_CCR_Length = 5;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2205      	movs	r2, #5
 800058c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	08008cb8 	.word	0x08008cb8
 800059c:	08008ce0 	.word	0x08008ce0
 80005a0:	08008cec 	.word	0x08008cec
 80005a4:	08008d18 	.word	0x08008d18
 80005a8:	08008d44 	.word	0x08008d44

080005ac <Handle_Message>:


void Handle_Message(uint8_t* Buf, uint8_t *Len, Message_Handling *Serial_Info){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
	Serial_Info->is_command = memcmp(Buf, "#", 1);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	781a      	ldrb	r2, [r3, #0]
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <Handle_Message+0x84>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	if (Serial_Info->is_command == 0) {
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d105      	bne.n	80005e0 <Handle_Message+0x34>
		Handle_Serial_Command(Buf, Len, Serial_Info);
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	68b9      	ldr	r1, [r7, #8]
 80005d8:	68f8      	ldr	r0, [r7, #12]
 80005da:	f000 f82b 	bl	8000634 <Handle_Serial_Command>
		Serial_Info->Message_Received = 0;
	}
	else if ((Serial_Info->Listening_For_CCR == 1) && (Serial_Info->Message_Received = 1)){
		Request_New_CCR(Buf, Len, Serial_Info);
	}
}
 80005de:	e022      	b.n	8000626 <Handle_Message+0x7a>
	else if ((Serial_Info->is_command != 0) && (Serial_Info->Listening_For_CCR != 1)) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d00f      	beq.n	800060a <Handle_Message+0x5e>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d00a      	beq.n	800060a <Handle_Message+0x5e>
		Error_Message((uint8_t*)Serial_Info->Serial_Not_Understood, sizeof(Serial_Info->Serial_Not_Understood));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3336      	adds	r3, #54	; 0x36
 80005f8:	212b      	movs	r1, #43	; 0x2b
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 f8a6 	bl	800074c <Error_Message>
		Serial_Info->Message_Received = 0;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
}
 8000608:	e00d      	b.n	8000626 <Handle_Message+0x7a>
	else if ((Serial_Info->Listening_For_CCR == 1) && (Serial_Info->Message_Received = 1)){
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000610:	2b01      	cmp	r3, #1
 8000612:	d108      	bne.n	8000626 <Handle_Message+0x7a>
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2201      	movs	r2, #1
 8000618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		Request_New_CCR(Buf, Len, Serial_Info);
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	68f8      	ldr	r0, [r7, #12]
 8000622:	f000 f843 	bl	80006ac <Request_New_CCR>
}
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	08008d50 	.word	0x08008d50

08000634 <Handle_Serial_Command>:


void Handle_Serial_Command(uint8_t* Buf, uint8_t *Len, Message_Handling *Serial_Info){
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
	if (Serial_Info->Listening_For_CCR == 0) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000646:	2b00      	cmp	r3, #0
 8000648:	d120      	bne.n	800068c <Handle_Serial_Command+0x58>
		Serial_Info->CCR_Change_Request_Check = memcmp(Buf+1, Serial_Info->CCR_Change_Code, sizeof(Serial_Info->CCR_Change_Code));
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	1c58      	adds	r0, r3, #1
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	3328      	adds	r3, #40	; 0x28
 8000652:	220c      	movs	r2, #12
 8000654:	4619      	mov	r1, r3
 8000656:	f008 f9ff 	bl	8008a58 <memcmp>
 800065a:	4603      	mov	r3, r0
 800065c:	b2da      	uxtb	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	701a      	strb	r2, [r3, #0]
		if (Serial_Info->CCR_Change_Request_Check == 0){
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d10a      	bne.n	8000680 <Handle_Serial_Command+0x4c>
			CDC_Transmit_FS((uint8_t*)Serial_Info->CCR_Request_Text, sizeof(Serial_Info->CCR_Request_Text)-1);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3301      	adds	r3, #1
 800066e:	2126      	movs	r1, #38	; 0x26
 8000670:	4618      	mov	r0, r3
 8000672:	f007 fcef 	bl	8008054 <CDC_Transmit_FS>
			Serial_Info->Listening_For_CCR = 1;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2201      	movs	r2, #1
 800067a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800067e:	e005      	b.n	800068c <Handle_Serial_Command+0x58>
		}
		else {
			Error_Message((uint8_t*)Serial_Info->Command_Not_Recognised, sizeof(Serial_Info->Command_Not_Recognised)-1);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	3364      	adds	r3, #100	; 0x64
 8000684:	2129      	movs	r1, #41	; 0x29
 8000686:	4618      	mov	r0, r3
 8000688:	f000 f860 	bl	800074c <Error_Message>
		}
	}
	Serial_Info->Message_Received = 0;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	memset(Buf, '\0', *Len);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f008 f9f9 	bl	8008a94 <memset>
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
	...

080006ac <Request_New_CCR>:


void Request_New_CCR(uint8_t* Buf, uint8_t* Len, Message_Handling *Serial_Info){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	memcpy(&Serial_Info->CCR_Request_Value, Buf, 16);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3362      	adds	r3, #98	; 0x62
 80006bc:	2210      	movs	r2, #16
 80006be:	68f9      	ldr	r1, [r7, #12]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f008 f9d9 	bl	8008a78 <memcpy>
	if ((Serial_Info->CCR_Request_Value >= 0) && (Serial_Info->CCR_Request_Value <= 65535) && (Serial_Info->Message_Received == 1)){
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d121      	bne.n	8000714 <Request_New_CCR+0x68>
		memcpy(&Serial_Info->New_CCR, &Serial_Info->CCR_Request_Value, 16);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f103 0099 	add.w	r0, r3, #153	; 0x99
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3362      	adds	r3, #98	; 0x62
 80006da:	2210      	movs	r2, #16
 80006dc:	4619      	mov	r1, r3
 80006de:	f008 f9cb 	bl	8008a78 <memcpy>
		//New_CCR_Public = Serial_Info->New_CCR[5];
		memcpy(&New_CCR_Public, &Serial_Info->New_CCR, 16);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3399      	adds	r3, #153	; 0x99
 80006e6:	2210      	movs	r2, #16
 80006e8:	4619      	mov	r1, r3
 80006ea:	4810      	ldr	r0, [pc, #64]	; (800072c <Request_New_CCR+0x80>)
 80006ec:	f008 f9c4 	bl	8008a78 <memcpy>
		Line_Break();
 80006f0:	f000 f81e 	bl	8000730 <Line_Break>
		CDC_Transmit_FS((uint8_t*)Serial_Info->New_CCR_Is, sizeof(Serial_Info->New_CCR_Is));
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	338e      	adds	r3, #142	; 0x8e
 80006f8:	210b      	movs	r1, #11
 80006fa:	4618      	mov	r0, r3
 80006fc:	f007 fcaa 	bl	8008054 <CDC_Transmit_FS>
		Line_Break();
 8000700:	f000 f816 	bl	8000730 <Line_Break>
		CDC_Transmit_FS(&Serial_Info->New_CCR, 5);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3399      	adds	r3, #153	; 0x99
 8000708:	2105      	movs	r1, #5
 800070a:	4618      	mov	r0, r3
 800070c:	f007 fca2 	bl	8008054 <CDC_Transmit_FS>
		Line_Break();
 8000710:	f000 f80e 	bl	8000730 <Line_Break>
	}
	Serial_Info->Message_Received = 0;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	Serial_Info->Listening_For_CCR = 0;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8000724:	bf00      	nop
 8000726:	3710      	adds	r7, #16
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200002b8 	.word	0x200002b8

08000730 <Line_Break>:


void Line_Break(){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
	char line_break[2];
	memcpy(line_break, "\r", 2);
 8000736:	230d      	movs	r3, #13
 8000738:	80bb      	strh	r3, [r7, #4]
	CDC_Transmit_FS((uint8_t*)line_break, sizeof(line_break)-1);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2101      	movs	r1, #1
 800073e:	4618      	mov	r0, r3
 8000740:	f007 fc88 	bl	8008054 <CDC_Transmit_FS>
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <Error_Message>:


void Error_Message(uint8_t* Message, uint16_t Len){
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
	CDC_Transmit_FS(Message, Len);
 8000758:	887b      	ldrh	r3, [r7, #2]
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f007 fc79 	bl	8008054 <CDC_Transmit_FS>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000770:	2108      	movs	r1, #8
 8000772:	4816      	ldr	r0, [pc, #88]	; (80007cc <main+0x60>)
 8000774:	f003 f99e 	bl	8003ab4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim3);
 8000778:	4814      	ldr	r0, [pc, #80]	; (80007cc <main+0x60>)
 800077a:	f003 f8d3 	bl	8003924 <HAL_TIM_Base_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077e:	f000 fa48 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f82f 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 f8ed 	bl	8000964 <MX_GPIO_Init>
  MX_TIM3_Init();
 800078a:	f000 f891 	bl	80008b0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800078e:	f007 fb89 	bl	8007ea4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	Serial_Init(&Serial_Info);
 8000792:	480f      	ldr	r0, [pc, #60]	; (80007d0 <main+0x64>)
 8000794:	f7ff feba 	bl	800050c <Serial_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		memset(&Serial_Info.Message_Received, Message_Available, 1);
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <main+0x68>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <main+0x6c>)
 80007a2:	f008 f977 	bl	8008a94 <memset>
		if (Message_Available == 1){
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <main+0x68>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d107      	bne.n	80007be <main+0x52>
			Handle_Message(buffer, (uint8_t*)(sizeof(buffer)), &Serial_Info);
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <main+0x64>)
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <main+0x70>)
 80007b4:	f7ff fefa 	bl	80005ac <Handle_Message>
			Message_Available = 0;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <main+0x68>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
		}

		//New_CCR = &Serial_Info.New_CCR;

		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, New_CCR_Public);
 80007be:	4b03      	ldr	r3, [pc, #12]	; (80007cc <main+0x60>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <main+0x74>)
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
		memset(&Serial_Info.Message_Received, Message_Available, 1);
 80007c8:	e7e6      	b.n	8000798 <main+0x2c>
 80007ca:	bf00      	nop
 80007cc:	2000018c 	.word	0x2000018c
 80007d0:	200001d8 	.word	0x200001d8
 80007d4:	200002b4 	.word	0x200002b4
 80007d8:	2000020d 	.word	0x2000020d
 80007dc:	20000274 	.word	0x20000274
 80007e0:	200002b8 	.word	0x200002b8

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	; 0x50
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f008 f94e 	bl	8008a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <SystemClock_Config+0xc4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a26      	ldr	r2, [pc, #152]	; (80008a8 <SystemClock_Config+0xc4>)
 800080e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <SystemClock_Config+0xc4>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <SystemClock_Config+0xc8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a20      	ldr	r2, [pc, #128]	; (80008ac <SystemClock_Config+0xc8>)
 800082a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <SystemClock_Config+0xc8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800083c:	2301      	movs	r3, #1
 800083e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000846:	2302      	movs	r3, #2
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800084a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000854:	2348      	movs	r3, #72	; 0x48
 8000856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800085c:	2303      	movs	r3, #3
 800085e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 0320 	add.w	r3, r7, #32
 8000864:	4618      	mov	r0, r3
 8000866:	f001 ffcb 	bl	8002800 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000870:	f000 f8a8 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	230f      	movs	r3, #15
 8000876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000878:	2302      	movs	r3, #2
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	2102      	movs	r1, #2
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fa59 	bl	8002d48 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800089c:	f000 f892 	bl	80009c4 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3750      	adds	r7, #80	; 0x50
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
 80008d0:	615a      	str	r2, [r3, #20]
 80008d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_TIM3_Init+0xac>)
 80008d6:	4a22      	ldr	r2, [pc, #136]	; (8000960 <MX_TIM3_Init+0xb0>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_TIM3_Init+0xac>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_TIM3_Init+0xac>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65536-1;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM3_Init+0xac>)
 80008e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_TIM3_Init+0xac>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_TIM3_Init+0xac>)
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008fa:	4818      	ldr	r0, [pc, #96]	; (800095c <MX_TIM3_Init+0xac>)
 80008fc:	f003 f882 	bl	8003a04 <HAL_TIM_PWM_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000906:	f000 f85d 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4810      	ldr	r0, [pc, #64]	; (800095c <MX_TIM3_Init+0xac>)
 800091a:	f003 fdfd 	bl	8004518 <HAL_TIMEx_MasterConfigSynchronization>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000924:	f000 f84e 	bl	80009c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000928:	2360      	movs	r3, #96	; 0x60
 800092a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000938:	463b      	mov	r3, r7
 800093a:	2208      	movs	r2, #8
 800093c:	4619      	mov	r1, r3
 800093e:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_TIM3_Init+0xac>)
 8000940:	f003 f9b2 	bl	8003ca8 <HAL_TIM_PWM_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800094a:	f000 f83b 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800094e:	4803      	ldr	r0, [pc, #12]	; (800095c <MX_TIM3_Init+0xac>)
 8000950:	f000 f882 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	; 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000018c 	.word	0x2000018c
 8000960:	40000400 	.word	0x40000400

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096a:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_GPIO_Init+0x5c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <MX_GPIO_Init+0x5c>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_GPIO_Init+0x5c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_GPIO_Init+0x5c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <MX_GPIO_Init+0x5c>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_GPIO_Init+0x5c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_GPIO_Init+0x5c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <MX_GPIO_Init+0x5c>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_GPIO_Init+0x5c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]

}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	; 0x40
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6453      	str	r3, [r2, #68]	; 0x44
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_TIM_PWM_MspInit+0x38>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d10b      	bne.n	8000a42 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 0302 	and.w	r3, r3, #2
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40000400 	.word	0x40000400
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a11      	ldr	r2, [pc, #68]	; (8000abc <HAL_TIM_MspPostInit+0x64>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d11b      	bne.n	8000ab2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a92:	2301      	movs	r3, #1
 8000a94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000aae:	f000 fa43 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40000400 	.word	0x40000400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020400 	.word	0x40020400

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <NMI_Handler+0x4>

08000ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <HardFault_Handler+0x4>

08000ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <MemManage_Handler+0x4>

08000ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <BusFault_Handler+0x4>

08000ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <UsageFault_Handler+0x4>

08000ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b14:	f000 f8ba 	bl	8000c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b20:	4802      	ldr	r0, [pc, #8]	; (8000b2c <OTG_FS_IRQHandler+0x10>)
 8000b22:	f000 fcfb 	bl	800151c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200017a4 	.word	0x200017a4

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f007 ff40 	bl	80089e4 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20050000 	.word	0x20050000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	200002bc 	.word	0x200002bc
 8000b98:	20001cc0 	.word	0x20001cc0

08000b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc6:	490e      	ldr	r1, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc8:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bdc:	4c0b      	ldr	r4, [pc, #44]	; (8000c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bea:	f7ff ffd7 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bee:	f007 feff 	bl	80089f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf2:	f7ff fdbb 	bl	800076c <main>
  bx  lr    
 8000bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000c04:	08008dbc 	.word	0x08008dbc
  ldr r2, =_sbss
 8000c08:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000c0c:	20001cbc 	.word	0x20001cbc

08000c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC_IRQHandler>

08000c12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c16:	2003      	movs	r0, #3
 8000c18:	f000 f94c 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1c:	200f      	movs	r0, #15
 8000c1e:	f000 f805 	bl	8000c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c22:	f7ff fed5 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_InitTick+0x54>)
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x58>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f967 	bl	8000f1e <HAL_SYSTICK_Config>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00e      	b.n	8000c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d80a      	bhi.n	8000c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f000 f92f 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c6c:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <HAL_InitTick+0x5c>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000
 8000c84:	20000008 	.word	0x20000008
 8000c88:	20000004 	.word	0x20000004

08000c8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x20>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_IncTick+0x24>)
 8000c9e:	6013      	str	r3, [r2, #0]
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	200002c0 	.word	0x200002c0

08000cb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	; (8000cc8 <HAL_GetTick+0x14>)
 8000cba:	681b      	ldr	r3, [r3, #0]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200002c0 	.word	0x200002c0

08000ccc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd4:	f7ff ffee 	bl	8000cb4 <HAL_GetTick>
 8000cd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce4:	d005      	beq.n	8000cf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_Delay+0x44>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	4413      	add	r3, r2
 8000cf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cf2:	bf00      	nop
 8000cf4:	f7ff ffde 	bl	8000cb4 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	68fa      	ldr	r2, [r7, #12]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d8f7      	bhi.n	8000cf4 <HAL_Delay+0x28>
  {
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	3710      	adds	r7, #16
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <__NVIC_SetPriorityGrouping+0x40>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x40>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00
 8000d58:	05fa0000 	.word	0x05fa0000

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
 8000f56:	e175      	b.n	8001244 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	f040 8164 	bne.w	800123e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d005      	beq.n	8000f8e <HAL_GPIO_Init+0x56>
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d130      	bne.n	8000ff0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	091b      	lsrs	r3, r3, #4
 8000fda:	f003 0201 	and.w	r2, r3, #1
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b03      	cmp	r3, #3
 8000ffa:	d017      	beq.n	800102c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	2203      	movs	r2, #3
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d123      	bne.n	8001080 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	08da      	lsrs	r2, r3, #3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3208      	adds	r2, #8
 8001040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	691a      	ldr	r2, [r3, #16]
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	08da      	lsrs	r2, r3, #3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3208      	adds	r2, #8
 800107a:	69b9      	ldr	r1, [r7, #24]
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0203 	and.w	r2, r3, #3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80be 	beq.w	800123e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c2:	4b66      	ldr	r3, [pc, #408]	; (800125c <HAL_GPIO_Init+0x324>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a65      	ldr	r2, [pc, #404]	; (800125c <HAL_GPIO_Init+0x324>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <HAL_GPIO_Init+0x324>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010da:	4a61      	ldr	r2, [pc, #388]	; (8001260 <HAL_GPIO_Init+0x328>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a58      	ldr	r2, [pc, #352]	; (8001264 <HAL_GPIO_Init+0x32c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d037      	beq.n	8001176 <HAL_GPIO_Init+0x23e>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a57      	ldr	r2, [pc, #348]	; (8001268 <HAL_GPIO_Init+0x330>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d031      	beq.n	8001172 <HAL_GPIO_Init+0x23a>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a56      	ldr	r2, [pc, #344]	; (800126c <HAL_GPIO_Init+0x334>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x236>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a55      	ldr	r2, [pc, #340]	; (8001270 <HAL_GPIO_Init+0x338>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x232>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a54      	ldr	r2, [pc, #336]	; (8001274 <HAL_GPIO_Init+0x33c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x22e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a53      	ldr	r2, [pc, #332]	; (8001278 <HAL_GPIO_Init+0x340>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x22a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a52      	ldr	r2, [pc, #328]	; (800127c <HAL_GPIO_Init+0x344>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x226>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a51      	ldr	r2, [pc, #324]	; (8001280 <HAL_GPIO_Init+0x348>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x222>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a50      	ldr	r2, [pc, #320]	; (8001284 <HAL_GPIO_Init+0x34c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x21e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4f      	ldr	r2, [pc, #316]	; (8001288 <HAL_GPIO_Init+0x350>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x21a>
 800114e:	2309      	movs	r3, #9
 8001150:	e012      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001152:	230a      	movs	r3, #10
 8001154:	e010      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001156:	2308      	movs	r3, #8
 8001158:	e00e      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800115a:	2307      	movs	r3, #7
 800115c:	e00c      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800115e:	2306      	movs	r3, #6
 8001160:	e00a      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001162:	2305      	movs	r3, #5
 8001164:	e008      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001166:	2304      	movs	r3, #4
 8001168:	e006      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800116a:	2303      	movs	r3, #3
 800116c:	e004      	b.n	8001178 <HAL_GPIO_Init+0x240>
 800116e:	2302      	movs	r3, #2
 8001170:	e002      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001172:	2301      	movs	r3, #1
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x240>
 8001176:	2300      	movs	r3, #0
 8001178:	69fa      	ldr	r2, [r7, #28]
 800117a:	f002 0203 	and.w	r2, r2, #3
 800117e:	0092      	lsls	r2, r2, #2
 8001180:	4093      	lsls	r3, r2
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001188:	4935      	ldr	r1, [pc, #212]	; (8001260 <HAL_GPIO_Init+0x328>)
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_GPIO_Init+0x354>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011ba:	4a34      	ldr	r2, [pc, #208]	; (800128c <HAL_GPIO_Init+0x354>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c0:	4b32      	ldr	r3, [pc, #200]	; (800128c <HAL_GPIO_Init+0x354>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <HAL_GPIO_Init+0x354>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <HAL_GPIO_Init+0x354>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800120e:	4a1f      	ldr	r2, [pc, #124]	; (800128c <HAL_GPIO_Init+0x354>)
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_GPIO_Init+0x354>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001238:	4a14      	ldr	r2, [pc, #80]	; (800128c <HAL_GPIO_Init+0x354>)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	3301      	adds	r3, #1
 8001242:	61fb      	str	r3, [r7, #28]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	f67f ae86 	bls.w	8000f58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40023800 	.word	0x40023800
 8001260:	40013800 	.word	0x40013800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	40020c00 	.word	0x40020c00
 8001274:	40021000 	.word	0x40021000
 8001278:	40021400 	.word	0x40021400
 800127c:	40021800 	.word	0x40021800
 8001280:	40021c00 	.word	0x40021c00
 8001284:	40022000 	.word	0x40022000
 8001288:	40022400 	.word	0x40022400
 800128c:	40013c00 	.word	0x40013c00

08001290 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	b08f      	sub	sp, #60	; 0x3c
 8001294:	af0a      	add	r7, sp, #40	; 0x28
 8001296:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e116      	b.n	80014d0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d106      	bne.n	80012c2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f007 f823 	bl	8008308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fab2 	bl	800484a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	687e      	ldr	r6, [r7, #4]
 80012ee:	466d      	mov	r5, sp
 80012f0:	f106 0410 	add.w	r4, r6, #16
 80012f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001300:	e885 0003 	stmia.w	r5, {r0, r1}
 8001304:	1d33      	adds	r3, r6, #4
 8001306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001308:	6838      	ldr	r0, [r7, #0]
 800130a:	f003 f993 	bl	8004634 <USB_CoreInit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0d7      	b.n	80014d0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f003 faa0 	bl	800486c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e04a      	b.n	80013c8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	4413      	add	r3, r2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	440b      	add	r3, r1
 8001340:	333d      	adds	r3, #61	; 0x3d
 8001342:	2201      	movs	r2, #1
 8001344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	333c      	adds	r3, #60	; 0x3c
 8001356:	7bfa      	ldrb	r2, [r7, #15]
 8001358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800135a:	7bfa      	ldrb	r2, [r7, #15]
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	b298      	uxth	r0, r3
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	3344      	adds	r3, #68	; 0x44
 800136e:	4602      	mov	r2, r0
 8001370:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4413      	add	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	440b      	add	r3, r1
 8001380:	3340      	adds	r3, #64	; 0x40
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	00db      	lsls	r3, r3, #3
 800138e:	4413      	add	r3, r2
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	440b      	add	r3, r1
 8001394:	3348      	adds	r3, #72	; 0x48
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	334c      	adds	r3, #76	; 0x4c
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013ae:	7bfa      	ldrb	r2, [r7, #15]
 80013b0:	6879      	ldr	r1, [r7, #4]
 80013b2:	4613      	mov	r3, r2
 80013b4:	00db      	lsls	r3, r3, #3
 80013b6:	4413      	add	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	440b      	add	r3, r1
 80013bc:	3354      	adds	r3, #84	; 0x54
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	3301      	adds	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3af      	bcc.n	8001332 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	e044      	b.n	8001462 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013d8:	7bfa      	ldrb	r2, [r7, #15]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013ee:	7bfa      	ldrb	r2, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4413      	add	r3, r2
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	440b      	add	r3, r1
 8001412:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800141a:	7bfa      	ldrb	r2, [r7, #15]
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	440b      	add	r3, r1
 8001428:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001430:	7bfa      	ldrb	r2, [r7, #15]
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	440b      	add	r3, r1
 800143e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	440b      	add	r3, r1
 8001454:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3301      	adds	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3b5      	bcc.n	80013d8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	603b      	str	r3, [r7, #0]
 8001472:	687e      	ldr	r6, [r7, #4]
 8001474:	466d      	mov	r5, sp
 8001476:	f106 0410 	add.w	r4, r6, #16
 800147a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001482:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001486:	e885 0003 	stmia.w	r5, {r0, r1}
 800148a:	1d33      	adds	r3, r6, #4
 800148c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800148e:	6838      	ldr	r0, [r7, #0]
 8001490:	f003 fa38 	bl	8004904 <USB_DevInit>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2202      	movs	r2, #2
 800149e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e014      	b.n	80014d0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d102      	bne.n	80014c4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f001 f97a 	bl	80027b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fb86 	bl	8005bda <USB_DevDisconnect>

  return HAL_OK;
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_PCD_Start+0x16>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e012      	b.n	8001514 <HAL_PCD_Start+0x3c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 f994 	bl	8004828 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fb47 	bl	8005b98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08d      	sub	sp, #52	; 0x34
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f004 fc05 	bl	8005d42 <USB_GetMode>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 84b7 	bne.w	8001eae <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fb69 	bl	8005c1c <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 84ad 	beq.w	8001eac <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f004 fb56 	bl	8005c1c <USB_ReadInterrupts>
 8001570:	4603      	mov	r3, r0
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b02      	cmp	r3, #2
 8001578:	d107      	bne.n	800158a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f002 0202 	and.w	r2, r2, #2
 8001588:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f004 fb44 	bl	8005c1c <USB_ReadInterrupts>
 8001594:	4603      	mov	r3, r0
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b10      	cmp	r3, #16
 800159c:	d161      	bne.n	8001662 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	699a      	ldr	r2, [r3, #24]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0210 	bic.w	r2, r2, #16
 80015ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80015ae:	6a3b      	ldr	r3, [r7, #32]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	f003 020f 	and.w	r2, r3, #15
 80015ba:	4613      	mov	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	3304      	adds	r3, #4
 80015cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	0c5b      	lsrs	r3, r3, #17
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d124      	bne.n	8001624 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d035      	beq.n	8001652 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	091b      	lsrs	r3, r3, #4
 80015ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80015f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	6a38      	ldr	r0, [r7, #32]
 80015fa:	f004 f97b 	bl	80058f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	691a      	ldr	r2, [r3, #16]
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800160a:	441a      	add	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800161c:	441a      	add	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	621a      	str	r2, [r3, #32]
 8001622:	e016      	b.n	8001652 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	0c5b      	lsrs	r3, r3, #17
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	2b06      	cmp	r3, #6
 800162e:	d110      	bne.n	8001652 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001636:	2208      	movs	r2, #8
 8001638:	4619      	mov	r1, r3
 800163a:	6a38      	ldr	r0, [r7, #32]
 800163c:	f004 f95a 	bl	80058f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	6a1a      	ldr	r2, [r3, #32]
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	091b      	lsrs	r3, r3, #4
 8001648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800164c:	441a      	add	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699a      	ldr	r2, [r3, #24]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0210 	orr.w	r2, r2, #16
 8001660:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f004 fad8 	bl	8005c1c <USB_ReadInterrupts>
 800166c:	4603      	mov	r3, r0
 800166e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001672:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001676:	f040 80a7 	bne.w	80017c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f004 fadd 	bl	8005c42 <USB_ReadDevAllOutEpInterrupt>
 8001688:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800168a:	e099      	b.n	80017c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b00      	cmp	r3, #0
 8001694:	f000 808e 	beq.w	80017b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	4611      	mov	r1, r2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f004 fb01 	bl	8005caa <USB_ReadDevOutEPInterrupt>
 80016a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d00c      	beq.n	80016ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c0:	461a      	mov	r2, r3
 80016c2:	2301      	movs	r3, #1
 80016c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80016c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 feef 	bl	80024ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00c      	beq.n	80016f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	015a      	lsls	r2, r3, #5
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	4413      	add	r3, r2
 80016e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e4:	461a      	mov	r2, r3
 80016e6:	2308      	movs	r3, #8
 80016e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 ffc5 	bl	800267c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	f003 0310 	and.w	r3, r3, #16
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001708:	461a      	mov	r2, r3
 800170a:	2310      	movs	r3, #16
 800170c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d030      	beq.n	800177a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	695b      	ldr	r3, [r3, #20]
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	2b80      	cmp	r3, #128	; 0x80
 8001722:	d109      	bne.n	8001738 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001736:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4413      	add	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	3304      	adds	r3, #4
 800174c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	78db      	ldrb	r3, [r3, #3]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	2200      	movs	r2, #0
 800175a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	b2db      	uxtb	r3, r3
 8001760:	4619      	mov	r1, r3
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f006 fef4 	bl	8008550 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	015a      	lsls	r2, r3, #5
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	4413      	add	r3, r2
 8001770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001774:	461a      	mov	r2, r3
 8001776:	2302      	movs	r3, #2
 8001778:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	015a      	lsls	r2, r3, #5
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	4413      	add	r3, r2
 800178c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001790:	461a      	mov	r2, r3
 8001792:	2320      	movs	r3, #32
 8001794:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	015a      	lsls	r2, r3, #5
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	4413      	add	r3, r2
 80017a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ac:	461a      	mov	r2, r3
 80017ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3301      	adds	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017bc:	085b      	lsrs	r3, r3, #1
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f af62 	bne.w	800168c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fa25 	bl	8005c1c <USB_ReadInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017dc:	f040 80db 	bne.w	8001996 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f004 fa46 	bl	8005c76 <USB_ReadDevAllInEpInterrupt>
 80017ea:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80017f0:	e0cd      	b.n	800198e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80c2 	beq.w	8001982 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f004 fa6c 	bl	8005ce6 <USB_ReadDevInEPInterrupt>
 800180e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d057      	beq.n	80018ca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f003 030f 	and.w	r3, r3, #15
 8001820:	2201      	movs	r2, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	69f9      	ldr	r1, [r7, #28]
 8001836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800183a:	4013      	ands	r3, r2
 800183c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800184a:	461a      	mov	r2, r3
 800184c:	2301      	movs	r3, #1
 800184e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d132      	bne.n	80018be <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185c:	4613      	mov	r3, r2
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	4413      	add	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	334c      	adds	r3, #76	; 0x4c
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4403      	add	r3, r0
 8001878:	3348      	adds	r3, #72	; 0x48
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4419      	add	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001882:	4613      	mov	r3, r2
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4403      	add	r3, r0
 800188c:	334c      	adds	r3, #76	; 0x4c
 800188e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	2b00      	cmp	r3, #0
 8001894:	d113      	bne.n	80018be <HAL_PCD_IRQHandler+0x3a2>
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4413      	add	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	440b      	add	r3, r1
 80018a4:	3354      	adds	r3, #84	; 0x54
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d108      	bne.n	80018be <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80018b6:	461a      	mov	r2, r3
 80018b8:	2101      	movs	r1, #1
 80018ba:	f004 fa75 	bl	8005da8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f006 fdbe 	bl	8008446 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	f003 0308 	and.w	r3, r3, #8
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	015a      	lsls	r2, r3, #5
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4413      	add	r3, r2
 80018dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e0:	461a      	mov	r2, r3
 80018e2:	2308      	movs	r3, #8
 80018e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	015a      	lsls	r2, r3, #5
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4413      	add	r3, r2
 80018f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018fc:	461a      	mov	r2, r3
 80018fe:	2310      	movs	r3, #16
 8001900:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	015a      	lsls	r2, r3, #5
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	4413      	add	r3, r2
 8001914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001918:	461a      	mov	r2, r3
 800191a:	2340      	movs	r3, #64	; 0x40
 800191c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d023      	beq.n	8001970 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800192a:	6a38      	ldr	r0, [r7, #32]
 800192c:	f003 f948 	bl	8004bc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001932:	4613      	mov	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	3338      	adds	r3, #56	; 0x38
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4413      	add	r3, r2
 8001940:	3304      	adds	r3, #4
 8001942:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	78db      	ldrb	r3, [r3, #3]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2200      	movs	r2, #0
 8001950:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	b2db      	uxtb	r3, r3
 8001956:	4619      	mov	r1, r3
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f006 fe0b 	bl	8008574 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	015a      	lsls	r2, r3, #5
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196a:	461a      	mov	r2, r3
 800196c:	2302      	movs	r3, #2
 800196e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800197a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fd08 	bl	8002392 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	3301      	adds	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800198e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f af2e 	bne.w	80017f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f004 f93e 	bl	8005c1c <USB_ReadInterrupts>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019aa:	d122      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d108      	bne.n	80019dc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019d2:	2100      	movs	r1, #0
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f006 ff85 	bl	80088e4 <HAL_PCDEx_LPM_Callback>
 80019da:	e002      	b.n	80019e2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f006 fda9 	bl	8008534 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80019f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f004 f910 	bl	8005c1c <USB_ReadInterrupts>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a06:	d112      	bne.n	8001a2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d102      	bne.n	8001a1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f006 fd65 	bl	80084e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f004 f8f2 	bl	8005c1c <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a42:	d121      	bne.n	8001a88 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001a52:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d111      	bne.n	8001a82 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	f003 020f 	and.w	r2, r3, #15
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001a78:	2101      	movs	r1, #1
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f006 ff32 	bl	80088e4 <HAL_PCDEx_LPM_Callback>
 8001a80:	e002      	b.n	8001a88 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f006 fd30 	bl	80084e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 f8c5 	bl	8005c1c <USB_ReadInterrupts>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a9c:	f040 80b7 	bne.w	8001c0e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	69fa      	ldr	r2, [r7, #28]
 8001aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aae:	f023 0301 	bic.w	r3, r3, #1
 8001ab2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2110      	movs	r1, #16
 8001aba:	4618      	mov	r0, r3
 8001abc:	f003 f880 	bl	8004bc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ac4:	e046      	b.n	8001b54 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ad8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001adc:	015a      	lsls	r2, r3, #5
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aea:	0151      	lsls	r1, r2, #5
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	440a      	add	r2, r1
 8001af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001af8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b06:	461a      	mov	r2, r3
 8001b08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001b0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b10:	015a      	lsls	r2, r3, #5
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b1e:	0151      	lsls	r1, r2, #5
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	440a      	add	r2, r1
 8001b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b3e:	0151      	lsls	r1, r2, #5
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	440a      	add	r2, r1
 8001b44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b50:	3301      	adds	r3, #1
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d3b3      	bcc.n	8001ac6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b6c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d016      	beq.n	8001ba8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b8a:	f043 030b 	orr.w	r3, r3, #11
 8001b8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba0:	f043 030b 	orr.w	r3, r3, #11
 8001ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba6:	e015      	b.n	8001bd4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bae:	695a      	ldr	r2, [r3, #20]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f242 032b 	movw	r3, #8235	; 0x202b
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bce:	f043 030b 	orr.w	r3, r3, #11
 8001bd2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001be6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	f004 f8d5 	bl	8005da8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f004 f802 	bl	8005c1c <USB_ReadInterrupts>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c22:	d124      	bne.n	8001c6e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 f899 	bl	8005d60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 f841 	bl	8004cba <USB_GetDevSpeed>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681c      	ldr	r4, [r3, #0]
 8001c44:	f001 fa72 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8001c48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4620      	mov	r0, r4
 8001c54:	f002 fd46 	bl	80046e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f006 fc1c 	bl	8008496 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 ffd2 	bl	8005c1c <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d10a      	bne.n	8001c98 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f006 fbf9 	bl	800847a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f002 0208 	and.w	r2, r2, #8
 8001c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f003 ffbd 	bl	8005c1c <USB_ReadInterrupts>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d122      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001cb8:	2301      	movs	r3, #1
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
 8001cbc:	e014      	b.n	8001ce8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d105      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 fb27 	bl	8002330 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d3e5      	bcc.n	8001cbe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f003 ff90 	bl	8005c1c <USB_ReadInterrupts>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d06:	d13b      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d08:	2301      	movs	r3, #1
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	e02b      	b.n	8001d66 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	015a      	lsls	r2, r3, #5
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3340      	adds	r3, #64	; 0x40
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d115      	bne.n	8001d60 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001d34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da12      	bge.n	8001d60 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d3e:	4613      	mov	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	440b      	add	r3, r1
 8001d48:	333f      	adds	r3, #63	; 0x3f
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fae8 	bl	8002330 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d3ce      	bcc.n	8001d0e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 ff49 	bl	8005c1c <USB_ReadInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d94:	d155      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001d96:	2301      	movs	r3, #1
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
 8001d9a:	e045      	b.n	8001e28 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d12e      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	da2b      	bge.n	8001e22 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001dd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d121      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001df0:	2201      	movs	r2, #1
 8001df2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d10a      	bne.n	8001e22 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e1e:	6053      	str	r3, [r2, #4]
            break;
 8001e20:	e007      	b.n	8001e32 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	3301      	adds	r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d3b4      	bcc.n	8001d9c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 fee8 	bl	8005c1c <USB_ReadInterrupts>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e56:	d10a      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f006 fb9d 	bl	8008598 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fed2 	bl	8005c1c <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d115      	bne.n	8001eae <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f006 fb8d 	bl	80085b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6859      	ldr	r1, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e000      	b.n	8001eae <HAL_PCD_IRQHandler+0x992>
      return;
 8001eac:	bf00      	nop
    }
  }
}
 8001eae:	3734      	adds	r7, #52	; 0x34
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd90      	pop	{r4, r7, pc}

08001eb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_SetAddress+0x1a>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e013      	b.n	8001ef6 <HAL_PCD_SetAddress+0x42>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 fe30 	bl	8005b4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
 8001f06:	4608      	mov	r0, r1
 8001f08:	4611      	mov	r1, r2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	70fb      	strb	r3, [r7, #3]
 8001f10:	460b      	mov	r3, r1
 8001f12:	803b      	strh	r3, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da0f      	bge.n	8001f44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	3338      	adds	r3, #56	; 0x38
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	705a      	strb	r2, [r3, #1]
 8001f42:	e00f      	b.n	8001f64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 020f 	and.w	r2, r3, #15
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f70:	883a      	ldrh	r2, [r7, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	78ba      	ldrb	r2, [r7, #2]
 8001f7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	785b      	ldrb	r3, [r3, #1]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f8e:	78bb      	ldrb	r3, [r7, #2]
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d102      	bne.n	8001f9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_PCD_EP_Open+0xaa>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e00e      	b.n	8001fc6 <HAL_PCD_EP_Open+0xc8>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f002 fea4 	bl	8004d04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da0f      	bge.n	8002002 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe2:	78fb      	ldrb	r3, [r7, #3]
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	3338      	adds	r3, #56	; 0x38
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	705a      	strb	r2, [r3, #1]
 8002000:	e00f      	b.n	8002022 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 020f 	and.w	r2, r3, #15
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	3304      	adds	r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	b2da      	uxtb	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002034:	2b01      	cmp	r3, #1
 8002036:	d101      	bne.n	800203c <HAL_PCD_EP_Close+0x6e>
 8002038:	2302      	movs	r3, #2
 800203a:	e00e      	b.n	800205a <HAL_PCD_EP_Close+0x8c>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68f9      	ldr	r1, [r7, #12]
 800204a:	4618      	mov	r0, r3
 800204c:	f002 fee2 	bl	8004e14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b086      	sub	sp, #24
 8002066:	af00      	add	r7, sp, #0
 8002068:	60f8      	str	r0, [r7, #12]
 800206a:	607a      	str	r2, [r7, #4]
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	460b      	mov	r3, r1
 8002070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002072:	7afb      	ldrb	r3, [r7, #11]
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2200      	movs	r2, #0
 800209c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2200      	movs	r2, #0
 80020a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d102      	bne.n	80020be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	6979      	ldr	r1, [r7, #20]
 80020d6:	f003 f9c9 	bl	800546c <USB_EP0StartXfer>
 80020da:	e008      	b.n	80020ee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	6979      	ldr	r1, [r7, #20]
 80020ea:	f002 ff6f 	bl	8004fcc <USB_EPStartXfer>
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 020f 	and.w	r2, r3, #15
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	460b      	mov	r3, r1
 8002136:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002138:	7afb      	ldrb	r3, [r7, #11]
 800213a:	f003 020f 	and.w	r2, r3, #15
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	3338      	adds	r3, #56	; 0x38
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	3304      	adds	r3, #4
 800214e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	2200      	movs	r2, #0
 8002160:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2201      	movs	r2, #1
 8002166:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	b2da      	uxtb	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d102      	bne.n	8002182 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002182:	7afb      	ldrb	r3, [r7, #11]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6818      	ldr	r0, [r3, #0]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	f003 f967 	bl	800546c <USB_EP0StartXfer>
 800219e:	e008      	b.n	80021b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6818      	ldr	r0, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	461a      	mov	r2, r3
 80021ac:	6979      	ldr	r1, [r7, #20]
 80021ae:	f002 ff0d 	bl	8004fcc <USB_EPStartXfer>
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d901      	bls.n	80021da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e050      	b.n	800227c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	da0f      	bge.n	8002202 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	4613      	mov	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	3338      	adds	r3, #56	; 0x38
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	705a      	strb	r2, [r3, #1]
 8002200:	e00d      	b.n	800221e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4413      	add	r3, r2
 8002214:	3304      	adds	r3, #4
 8002216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2201      	movs	r2, #1
 8002222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	b2da      	uxtb	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002236:	2b01      	cmp	r3, #1
 8002238:	d101      	bne.n	800223e <HAL_PCD_EP_SetStall+0x82>
 800223a:	2302      	movs	r3, #2
 800223c:	e01e      	b.n	800227c <HAL_PCD_EP_SetStall+0xc0>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	4618      	mov	r0, r3
 800224e:	f003 fba9 	bl	80059a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10a      	bne.n	8002272 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	b2d9      	uxtb	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800226c:	461a      	mov	r2, r3
 800226e:	f003 fd9b 	bl	8005da8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002290:	78fb      	ldrb	r3, [r7, #3]
 8002292:	f003 020f 	and.w	r2, r3, #15
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d901      	bls.n	80022a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e042      	b.n	8002328 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da0f      	bge.n	80022ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 020f 	and.w	r2, r3, #15
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	3338      	adds	r3, #56	; 0x38
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4413      	add	r3, r2
 80022be:	3304      	adds	r3, #4
 80022c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2201      	movs	r2, #1
 80022c6:	705a      	strb	r2, [r3, #1]
 80022c8:	e00f      	b.n	80022ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_PCD_EP_ClrStall+0x86>
 8002306:	2302      	movs	r3, #2
 8002308:	e00e      	b.n	8002328 <HAL_PCD_EP_ClrStall+0xa4>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68f9      	ldr	r1, [r7, #12]
 8002318:	4618      	mov	r0, r3
 800231a:	f003 fbb1 	bl	8005a80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800233c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002340:	2b00      	cmp	r3, #0
 8002342:	da0c      	bge.n	800235e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 020f 	and.w	r2, r3, #15
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	3338      	adds	r3, #56	; 0x38
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	3304      	adds	r3, #4
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e00c      	b.n	8002378 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 020f 	and.w	r2, r3, #15
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	3304      	adds	r3, #4
 8002376:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68f9      	ldr	r1, [r7, #12]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 f9d0 	bl	8005724 <USB_EPStopXfer>
 8002384:	4603      	mov	r3, r0
 8002386:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002388:	7afb      	ldrb	r3, [r7, #11]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08a      	sub	sp, #40	; 0x28
 8002396:	af02      	add	r7, sp, #8
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	3338      	adds	r3, #56	; 0x38
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	3304      	adds	r3, #4
 80023b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d901      	bls.n	80023ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06c      	b.n	80024a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d902      	bls.n	80023e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3303      	adds	r3, #3
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80023ee:	e02b      	b.n	8002448 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	429a      	cmp	r2, r3
 8002404:	d902      	bls.n	800240c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3303      	adds	r3, #3
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6919      	ldr	r1, [r3, #16]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002424:	b2db      	uxtb	r3, r3
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	4603      	mov	r3, r0
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f003 fa24 	bl	8005878 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	441a      	add	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	441a      	add	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	015a      	lsls	r2, r3, #5
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	b29b      	uxth	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	429a      	cmp	r2, r3
 800245c:	d809      	bhi.n	8002472 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002466:	429a      	cmp	r2, r3
 8002468:	d203      	bcs.n	8002472 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1be      	bne.n	80023f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	429a      	cmp	r2, r3
 800247c:	d811      	bhi.n	80024a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	2201      	movs	r2, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	43db      	mvns	r3, r3
 8002498:	6939      	ldr	r1, [r7, #16]
 800249a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800249e:	4013      	ands	r3, r2
 80024a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	333c      	adds	r3, #60	; 0x3c
 80024c4:	3304      	adds	r3, #4
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d17b      	bne.n	80025da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4a61      	ldr	r2, [pc, #388]	; (8002674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	f240 80b9 	bls.w	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80b3 	beq.w	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	015a      	lsls	r2, r3, #5
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4413      	add	r3, r2
 800250a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250e:	461a      	mov	r2, r3
 8002510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002514:	6093      	str	r3, [r2, #8]
 8002516:	e0a7      	b.n	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800252e:	461a      	mov	r2, r3
 8002530:	2320      	movs	r3, #32
 8002532:	6093      	str	r3, [r2, #8]
 8002534:	e098      	b.n	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 8093 	bne.w	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	4a4b      	ldr	r2, [pc, #300]	; (8002674 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d90f      	bls.n	800256a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002560:	461a      	mov	r2, r3
 8002562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002566:	6093      	str	r3, [r2, #8]
 8002568:	e07e      	b.n	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	4613      	mov	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	4413      	add	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4413      	add	r3, r2
 800257c:	3304      	adds	r3, #4
 800257e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	69da      	ldr	r2, [r3, #28]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	0159      	lsls	r1, r3, #5
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	440b      	add	r3, r1
 800258c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	1ad2      	subs	r2, r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d114      	bne.n	80025cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025b4:	461a      	mov	r2, r3
 80025b6:	2101      	movs	r1, #1
 80025b8:	f003 fbf6 	bl	8005da8 <USB_EP0_OutStart>
 80025bc:	e006      	b.n	80025cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	441a      	add	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f005 ff1c 	bl	8008410 <HAL_PCD_DataOutStageCallback>
 80025d8:	e046      	b.n	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d124      	bne.n	800262c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00a      	beq.n	8002602 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f8:	461a      	mov	r2, r3
 80025fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025fe:	6093      	str	r3, [r2, #8]
 8002600:	e032      	b.n	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	461a      	mov	r2, r3
 800261a:	2320      	movs	r3, #32
 800261c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f005 fef3 	bl	8008410 <HAL_PCD_DataOutStageCallback>
 800262a:	e01d      	b.n	8002668 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d114      	bne.n	800265c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d108      	bne.n	800265c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002654:	461a      	mov	r2, r3
 8002656:	2100      	movs	r1, #0
 8002658:	f003 fba6 	bl	8005da8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4619      	mov	r1, r3
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f005 fed4 	bl	8008410 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	4f54300a 	.word	0x4f54300a
 8002678:	4f54310a 	.word	0x4f54310a

0800267c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	333c      	adds	r3, #60	; 0x3c
 8002694:	3304      	adds	r3, #4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a15      	ldr	r2, [pc, #84]	; (8002704 <PCD_EP_OutSetupPacket_int+0x88>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d90e      	bls.n	80026d0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026c8:	461a      	mov	r2, r3
 80026ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026ce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f005 fe8b 	bl	80083ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <PCD_EP_OutSetupPacket_int+0x88>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d90c      	bls.n	80026f8 <PCD_EP_OutSetupPacket_int+0x7c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d108      	bne.n	80026f8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026f0:	461a      	mov	r2, r3
 80026f2:	2101      	movs	r1, #1
 80026f4:	f003 fb58 	bl	8005da8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	4f54300a 	.word	0x4f54300a

08002708 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
 8002714:	4613      	mov	r3, r2
 8002716:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d107      	bne.n	8002736 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002726:	883b      	ldrh	r3, [r7, #0]
 8002728:	0419      	lsls	r1, r3, #16
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	430a      	orrs	r2, r1
 8002732:	629a      	str	r2, [r3, #40]	; 0x28
 8002734:	e028      	b.n	8002788 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	0c1b      	lsrs	r3, r3, #16
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	4413      	add	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002744:	2300      	movs	r3, #0
 8002746:	73fb      	strb	r3, [r7, #15]
 8002748:	e00d      	b.n	8002766 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	3340      	adds	r3, #64	; 0x40
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	0c1b      	lsrs	r3, r3, #16
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	4413      	add	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	3301      	adds	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	3b01      	subs	r3, #1
 800276c:	429a      	cmp	r2, r3
 800276e:	d3ec      	bcc.n	800274a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002770:	883b      	ldrh	r3, [r7, #0]
 8002772:	0418      	lsls	r0, r3, #16
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6819      	ldr	r1, [r3, #0]
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	3b01      	subs	r3, #1
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	4302      	orrs	r2, r0
 8002780:	3340      	adds	r3, #64	; 0x40
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	887a      	ldrh	r2, [r7, #2]
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_PCDEx_ActivateLPM+0x44>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	10000003 	.word	0x10000003

08002800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e291      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8087 	beq.w	8002932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002824:	4b96      	ldr	r3, [pc, #600]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b04      	cmp	r3, #4
 800282e:	d00c      	beq.n	800284a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002830:	4b93      	ldr	r3, [pc, #588]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030c 	and.w	r3, r3, #12
 8002838:	2b08      	cmp	r3, #8
 800283a:	d112      	bne.n	8002862 <HAL_RCC_OscConfig+0x62>
 800283c:	4b90      	ldr	r3, [pc, #576]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002848:	d10b      	bne.n	8002862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800284a:	4b8d      	ldr	r3, [pc, #564]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d06c      	beq.n	8002930 <HAL_RCC_OscConfig+0x130>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d168      	bne.n	8002930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e26b      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x7a>
 800286c:	4b84      	ldr	r3, [pc, #528]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a83      	ldr	r2, [pc, #524]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	e02e      	b.n	80028d8 <HAL_RCC_OscConfig+0xd8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x9c>
 8002882:	4b7f      	ldr	r3, [pc, #508]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7e      	ldr	r2, [pc, #504]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b7c      	ldr	r3, [pc, #496]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7b      	ldr	r2, [pc, #492]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xd8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0xc0>
 80028a6:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a75      	ldr	r2, [pc, #468]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a72      	ldr	r2, [pc, #456]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xd8>
 80028c0:	4b6f      	ldr	r3, [pc, #444]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6e      	ldr	r2, [pc, #440]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6b      	ldr	r2, [pc, #428]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe f9e8 	bl	8000cb4 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe f9e4 	bl	8000cb4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	; 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e21f      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xe8>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe f9d4 	bl	8000cb4 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe f9d0 	bl	8000cb4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e20b      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b57      	ldr	r3, [pc, #348]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x110>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d069      	beq.n	8002a12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294a:	4b4d      	ldr	r3, [pc, #308]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b08      	cmp	r3, #8
 8002954:	d11c      	bne.n	8002990 <HAL_RCC_OscConfig+0x190>
 8002956:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d116      	bne.n	8002990 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <HAL_RCC_OscConfig+0x17a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e1df      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297a:	4b41      	ldr	r3, [pc, #260]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	493d      	ldr	r1, [pc, #244]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298e:	e040      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d023      	beq.n	80029e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a38      	ldr	r2, [pc, #224]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 800299e:	f043 0301 	orr.w	r3, r3, #1
 80029a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7fe f986 	bl	8000cb4 <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ac:	f7fe f982 	bl	8000cb4 <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1bd      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4929      	ldr	r1, [pc, #164]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
 80029de:	e018      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e0:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a26      	ldr	r2, [pc, #152]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 80029e6:	f023 0301 	bic.w	r3, r3, #1
 80029ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe f962 	bl	8000cb4 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f4:	f7fe f95e 	bl	8000cb4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e199      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d038      	beq.n	8002a90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d019      	beq.n	8002a5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a26:	4b16      	ldr	r3, [pc, #88]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a32:	f7fe f93f 	bl	8000cb4 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3a:	f7fe f93b 	bl	8000cb4 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e176      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x23a>
 8002a58:	e01a      	b.n	8002a90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_RCC_OscConfig+0x280>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe f925 	bl	8000cb4 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe f921 	bl	8000cb4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d903      	bls.n	8002a84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e15c      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
 8002a80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a84:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1ee      	bne.n	8002a6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80a4 	beq.w	8002be6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a87      	ldr	r2, [pc, #540]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	60bb      	str	r3, [r7, #8]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ac6:	4b82      	ldr	r3, [pc, #520]	; (8002cd0 <HAL_RCC_OscConfig+0x4d0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d118      	bne.n	8002b04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002ad2:	4b7f      	ldr	r3, [pc, #508]	; (8002cd0 <HAL_RCC_OscConfig+0x4d0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a7e      	ldr	r2, [pc, #504]	; (8002cd0 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fe f8e9 	bl	8000cb4 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae6:	f7fe f8e5 	bl	8000cb4 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b64      	cmp	r3, #100	; 0x64
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e120      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af8:	4b75      	ldr	r3, [pc, #468]	; (8002cd0 <HAL_RCC_OscConfig+0x4d0>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d106      	bne.n	8002b1a <HAL_RCC_OscConfig+0x31a>
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
 8002b18:	e02d      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10c      	bne.n	8002b3c <HAL_RCC_OscConfig+0x33c>
 8002b22:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b32:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	6713      	str	r3, [r2, #112]	; 0x70
 8002b3a:	e01c      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d10c      	bne.n	8002b5e <HAL_RCC_OscConfig+0x35e>
 8002b44:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a60      	ldr	r2, [pc, #384]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b50:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b54:	4a5d      	ldr	r2, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5c:	e00b      	b.n	8002b76 <HAL_RCC_OscConfig+0x376>
 8002b5e:	4b5b      	ldr	r3, [pc, #364]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b62:	4a5a      	ldr	r2, [pc, #360]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d015      	beq.n	8002baa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fe f899 	bl	8000cb4 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b84:	e00a      	b.n	8002b9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe f895 	bl	8000cb4 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e0ce      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b9c:	4b4b      	ldr	r3, [pc, #300]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <HAL_RCC_OscConfig+0x386>
 8002ba8:	e014      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002baa:	f7fe f883 	bl	8000cb4 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb0:	e00a      	b.n	8002bc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe f87f 	bl	8000cb4 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0b8      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bd4:	7dfb      	ldrb	r3, [r7, #23]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bda:	4b3c      	ldr	r3, [pc, #240]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80a4 	beq.w	8002d38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	4b36      	ldr	r3, [pc, #216]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 030c 	and.w	r3, r3, #12
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d06b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d149      	bne.n	8002c98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c04:	4b31      	ldr	r3, [pc, #196]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a30      	ldr	r2, [pc, #192]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe f850 	bl	8000cb4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c18:	f7fe f84c 	bl	8000cb4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e087      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2a:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	041b      	lsls	r3, r3, #16
 8002c52:	431a      	orrs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a18      	ldr	r2, [pc, #96]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe f820 	bl	8000cb4 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe f81c 	bl	8000cb4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e057      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x478>
 8002c96:	e04f      	b.n	8002d38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f806 	bl	8000cb4 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe f802 	bl	8000cb4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e03d      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cbe:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x4ac>
 8002cca:	e035      	b.n	8002d38 <HAL_RCC_OscConfig+0x538>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002cd4:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCC_OscConfig+0x544>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d028      	beq.n	8002d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d121      	bne.n	8002d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d11a      	bne.n	8002d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d04:	4013      	ands	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d111      	bne.n	8002d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0d0      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b6a      	ldr	r3, [pc, #424]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d910      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 020f 	bic.w	r2, r3, #15
 8002d76:	4965      	ldr	r1, [pc, #404]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0b8      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d005      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da8:	4b59      	ldr	r3, [pc, #356]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	4a58      	ldr	r2, [pc, #352]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc0:	4b53      	ldr	r3, [pc, #332]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a52      	ldr	r2, [pc, #328]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dcc:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	494d      	ldr	r1, [pc, #308]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d040      	beq.n	8002e6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d115      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e07f      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e073      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1a:	4b3d      	ldr	r3, [pc, #244]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e06b      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2a:	4b39      	ldr	r3, [pc, #228]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f023 0203 	bic.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4936      	ldr	r1, [pc, #216]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fd ff3a 	bl	8000cb4 <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e44:	f7fd ff36 	bl	8000cb4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e053      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5a:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 020c 	and.w	r2, r3, #12
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d1eb      	bne.n	8002e44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d210      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	4922      	ldr	r1, [pc, #136]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8a:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_RCC_ClockConfig+0x1c4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e032      	b.n	8002f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4916      	ldr	r1, [pc, #88]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0308 	and.w	r3, r3, #8
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	490e      	ldr	r1, [pc, #56]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eda:	f000 f821 	bl	8002f20 <HAL_RCC_GetSysClockFreq>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	; (8002f10 <HAL_RCC_ClockConfig+0x1c8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	490a      	ldr	r1, [pc, #40]	; (8002f14 <HAL_RCC_ClockConfig+0x1cc>)
 8002eec:	5ccb      	ldrb	r3, [r1, r3]
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	4a09      	ldr	r2, [pc, #36]	; (8002f18 <HAL_RCC_ClockConfig+0x1d0>)
 8002ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <HAL_RCC_ClockConfig+0x1d4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fd fe96 	bl	8000c2c <HAL_InitTick>

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023c00 	.word	0x40023c00
 8002f10:	40023800 	.word	0x40023800
 8002f14:	08008d9c 	.word	0x08008d9c
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	20000004 	.word	0x20000004

08002f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f24:	b094      	sub	sp, #80	; 0x50
 8002f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f30:	2300      	movs	r3, #0
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f38:	4b79      	ldr	r3, [pc, #484]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 030c 	and.w	r3, r3, #12
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d00d      	beq.n	8002f60 <HAL_RCC_GetSysClockFreq+0x40>
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	f200 80e1 	bhi.w	800310c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x34>
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d003      	beq.n	8002f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f52:	e0db      	b.n	800310c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b73      	ldr	r3, [pc, #460]	; (8003124 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f58:	e0db      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f5a:	4b73      	ldr	r3, [pc, #460]	; (8003128 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f5e:	e0d8      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f60:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d063      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f76:	4b6a      	ldr	r3, [pc, #424]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f92:	4622      	mov	r2, r4
 8002f94:	462b      	mov	r3, r5
 8002f96:	f04f 0000 	mov.w	r0, #0
 8002f9a:	f04f 0100 	mov.w	r1, #0
 8002f9e:	0159      	lsls	r1, r3, #5
 8002fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa4:	0150      	lsls	r0, r2, #5
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	4621      	mov	r1, r4
 8002fac:	1a51      	subs	r1, r2, r1
 8002fae:	6139      	str	r1, [r7, #16]
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fc4:	4659      	mov	r1, fp
 8002fc6:	018b      	lsls	r3, r1, #6
 8002fc8:	4651      	mov	r1, sl
 8002fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fce:	4651      	mov	r1, sl
 8002fd0:	018a      	lsls	r2, r1, #6
 8002fd2:	4651      	mov	r1, sl
 8002fd4:	ebb2 0801 	subs.w	r8, r2, r1
 8002fd8:	4659      	mov	r1, fp
 8002fda:	eb63 0901 	sbc.w	r9, r3, r1
 8002fde:	f04f 0200 	mov.w	r2, #0
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff2:	4690      	mov	r8, r2
 8002ff4:	4699      	mov	r9, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	eb18 0303 	adds.w	r3, r8, r3
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	462b      	mov	r3, r5
 8003000:	eb49 0303 	adc.w	r3, r9, r3
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003012:	4629      	mov	r1, r5
 8003014:	024b      	lsls	r3, r1, #9
 8003016:	4621      	mov	r1, r4
 8003018:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800301c:	4621      	mov	r1, r4
 800301e:	024a      	lsls	r2, r1, #9
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003026:	2200      	movs	r2, #0
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
 800302a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800302c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003030:	f7fd f8ea 	bl	8000208 <__aeabi_uldivmod>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4613      	mov	r3, r2
 800303a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800303c:	e058      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303e:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	099b      	lsrs	r3, r3, #6
 8003044:	2200      	movs	r2, #0
 8003046:	4618      	mov	r0, r3
 8003048:	4611      	mov	r1, r2
 800304a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	2300      	movs	r3, #0
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
 8003054:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003058:	4642      	mov	r2, r8
 800305a:	464b      	mov	r3, r9
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	0159      	lsls	r1, r3, #5
 8003066:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800306a:	0150      	lsls	r0, r2, #5
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4641      	mov	r1, r8
 8003072:	ebb2 0a01 	subs.w	sl, r2, r1
 8003076:	4649      	mov	r1, r9
 8003078:	eb63 0b01 	sbc.w	fp, r3, r1
 800307c:	f04f 0200 	mov.w	r2, #0
 8003080:	f04f 0300 	mov.w	r3, #0
 8003084:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003088:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800308c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003090:	ebb2 040a 	subs.w	r4, r2, sl
 8003094:	eb63 050b 	sbc.w	r5, r3, fp
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	00eb      	lsls	r3, r5, #3
 80030a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030a6:	00e2      	lsls	r2, r4, #3
 80030a8:	4614      	mov	r4, r2
 80030aa:	461d      	mov	r5, r3
 80030ac:	4643      	mov	r3, r8
 80030ae:	18e3      	adds	r3, r4, r3
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	464b      	mov	r3, r9
 80030b4:	eb45 0303 	adc.w	r3, r5, r3
 80030b8:	607b      	str	r3, [r7, #4]
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030c6:	4629      	mov	r1, r5
 80030c8:	028b      	lsls	r3, r1, #10
 80030ca:	4621      	mov	r1, r4
 80030cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d0:	4621      	mov	r1, r4
 80030d2:	028a      	lsls	r2, r1, #10
 80030d4:	4610      	mov	r0, r2
 80030d6:	4619      	mov	r1, r3
 80030d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030da:	2200      	movs	r2, #0
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	61fa      	str	r2, [r7, #28]
 80030e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030e4:	f7fd f890 	bl	8000208 <__aeabi_uldivmod>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4613      	mov	r3, r2
 80030ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_GetSysClockFreq+0x200>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	3301      	adds	r3, #1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003104:	fbb2 f3f3 	udiv	r3, r2, r3
 8003108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800310a:	e002      	b.n	8003112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetSysClockFreq+0x204>)
 800310e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003114:	4618      	mov	r0, r3
 8003116:	3750      	adds	r7, #80	; 0x50
 8003118:	46bd      	mov	sp, r7
 800311a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	00f42400 	.word	0x00f42400
 8003128:	007a1200 	.word	0x007a1200

0800312c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d012      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800316c:	4b69      	ldr	r3, [pc, #420]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	4a68      	ldr	r2, [pc, #416]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003172:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003176:	6093      	str	r3, [r2, #8]
 8003178:	4b66      	ldr	r3, [pc, #408]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	4964      	ldr	r1, [pc, #400]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d017      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800319e:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	4959      	ldr	r1, [pc, #356]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031bc:	d101      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80031be:	2301      	movs	r3, #1
 80031c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d017      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031da:	4b4e      	ldr	r3, [pc, #312]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	494a      	ldr	r1, [pc, #296]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f8:	d101      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003216:	2301      	movs	r3, #1
 8003218:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 808b 	beq.w	800333e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003228:	4b3a      	ldr	r3, [pc, #232]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	4a39      	ldr	r2, [pc, #228]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800322e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003232:	6413      	str	r3, [r2, #64]	; 0x40
 8003234:	4b37      	ldr	r3, [pc, #220]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323c:	60bb      	str	r3, [r7, #8]
 800323e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003240:	4b35      	ldr	r3, [pc, #212]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a34      	ldr	r2, [pc, #208]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800324a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800324c:	f7fd fd32 	bl	8000cb4 <HAL_GetTick>
 8003250:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003254:	f7fd fd2e 	bl	8000cb4 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b64      	cmp	r3, #100	; 0x64
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e357      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003266:	4b2c      	ldr	r3, [pc, #176]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d035      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d02e      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003290:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003298:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032b2:	4a18      	ldr	r2, [pc, #96]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032b8:	4b16      	ldr	r3, [pc, #88]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d114      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fd fcf6 	bl	8000cb4 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ca:	e00a      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032cc:	f7fd fcf2 	bl	8000cb4 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032da:	4293      	cmp	r3, r2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e319      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d0ee      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032fa:	d111      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003308:	4b04      	ldr	r3, [pc, #16]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800330a:	400b      	ands	r3, r1
 800330c:	4901      	ldr	r1, [pc, #4]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
 8003312:	e00b      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003314:	40023800 	.word	0x40023800
 8003318:	40007000 	.word	0x40007000
 800331c:	0ffffcff 	.word	0x0ffffcff
 8003320:	4baa      	ldr	r3, [pc, #680]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4aa9      	ldr	r2, [pc, #676]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003326:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800332a:	6093      	str	r3, [r2, #8]
 800332c:	4ba7      	ldr	r3, [pc, #668]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003338:	49a4      	ldr	r1, [pc, #656]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333a:	4313      	orrs	r3, r2
 800333c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	d010      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800334a:	4ba0      	ldr	r3, [pc, #640]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	4a9e      	ldr	r2, [pc, #632]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003356:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800335a:	4b9c      	ldr	r3, [pc, #624]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800335c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	4999      	ldr	r1, [pc, #612]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003378:	4b94      	ldr	r3, [pc, #592]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003386:	4991      	ldr	r1, [pc, #580]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800339a:	4b8c      	ldr	r3, [pc, #560]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033a8:	4988      	ldr	r1, [pc, #544]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033bc:	4b83      	ldr	r3, [pc, #524]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ca:	4980      	ldr	r1, [pc, #512]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033de:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4977      	ldr	r1, [pc, #476]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003400:	4b72      	ldr	r3, [pc, #456]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	f023 0203 	bic.w	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	496f      	ldr	r1, [pc, #444]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003422:	4b6a      	ldr	r3, [pc, #424]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f023 020c 	bic.w	r2, r3, #12
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	4966      	ldr	r1, [pc, #408]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003444:	4b61      	ldr	r3, [pc, #388]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	495e      	ldr	r1, [pc, #376]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003466:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	4955      	ldr	r1, [pc, #340]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003488:	4b50      	ldr	r3, [pc, #320]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	494d      	ldr	r1, [pc, #308]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80034aa:	4b48      	ldr	r3, [pc, #288]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b8:	4944      	ldr	r1, [pc, #272]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	493c      	ldr	r1, [pc, #240]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034ee:	4b37      	ldr	r3, [pc, #220]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	4933      	ldr	r1, [pc, #204]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003510:	4b2e      	ldr	r3, [pc, #184]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003516:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800351e:	492b      	ldr	r1, [pc, #172]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d011      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003538:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003540:	4922      	ldr	r1, [pc, #136]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003550:	d101      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003552:	2301      	movs	r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003562:	2301      	movs	r3, #1
 8003564:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003572:	4b16      	ldr	r3, [pc, #88]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003580:	4912      	ldr	r1, [pc, #72]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800359a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a4:	4909      	ldr	r1, [pc, #36]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d006      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 80d9 	beq.w	8003772 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035c0:	4b02      	ldr	r3, [pc, #8]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a01      	ldr	r2, [pc, #4]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80035ca:	e001      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d2:	f7fd fb6f 	bl	8000cb4 <HAL_GetTick>
 80035d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035da:	f7fd fb6b 	bl	8000cb4 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d901      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e194      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035ec:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d021      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	d11d      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800360c:	4b64      	ldr	r3, [pc, #400]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800360e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	f003 0303 	and.w	r3, r3, #3
 8003618:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800361a:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003620:	0e1b      	lsrs	r3, r3, #24
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	019a      	lsls	r2, r3, #6
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	041b      	lsls	r3, r3, #16
 8003632:	431a      	orrs	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	061b      	lsls	r3, r3, #24
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	071b      	lsls	r3, r3, #28
 8003640:	4957      	ldr	r1, [pc, #348]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02e      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003672:	d129      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003674:	4b4a      	ldr	r3, [pc, #296]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003684:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003688:	0f1b      	lsrs	r3, r3, #28
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	019a      	lsls	r2, r3, #6
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	431a      	orrs	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	071b      	lsls	r3, r3, #28
 80036a8:	493d      	ldr	r1, [pc, #244]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80036b0:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b6:	f023 021f 	bic.w	r2, r3, #31
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	3b01      	subs	r3, #1
 80036c0:	4937      	ldr	r1, [pc, #220]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80036d4:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036da:	0e1b      	lsrs	r3, r3, #24
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036e8:	0f1b      	lsrs	r3, r3, #28
 80036ea:	f003 0307 	and.w	r3, r3, #7
 80036ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	019a      	lsls	r2, r3, #6
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	431a      	orrs	r2, r3
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	431a      	orrs	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	071b      	lsls	r3, r3, #28
 8003708:	4925      	ldr	r1, [pc, #148]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d011      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	019a      	lsls	r2, r3, #6
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	061b      	lsls	r3, r3, #24
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	071b      	lsls	r3, r3, #28
 8003738:	4919      	ldr	r1, [pc, #100]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003740:	4b17      	ldr	r3, [pc, #92]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800374a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374c:	f7fd fab2 	bl	8000cb4 <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003754:	f7fd faae 	bl	8000cb4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b64      	cmp	r3, #100	; 0x64
 8003760:	d901      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0d7      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	2b01      	cmp	r3, #1
 8003776:	f040 80cd 	bne.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a08      	ldr	r2, [pc, #32]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003786:	f7fd fa95 	bl	8000cb4 <HAL_GetTick>
 800378a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800378e:	f7fd fa91 	bl	8000cb4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	; 0x64
 800379a:	d903      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0ba      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80037a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80037a4:	4b5e      	ldr	r3, [pc, #376]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037b0:	d0ed      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d009      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d02e      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d12a      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037da:	4b51      	ldr	r3, [pc, #324]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	0c1b      	lsrs	r3, r3, #16
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037e8:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ee:	0f1b      	lsrs	r3, r3, #28
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	019a      	lsls	r2, r3, #6
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	071b      	lsls	r3, r3, #28
 800380e:	4944      	ldr	r1, [pc, #272]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003816:	4b42      	ldr	r3, [pc, #264]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800381c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	3b01      	subs	r3, #1
 8003826:	021b      	lsls	r3, r3, #8
 8003828:	493d      	ldr	r1, [pc, #244]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d022      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003840:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003844:	d11d      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003846:	4b36      	ldr	r3, [pc, #216]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800384c:	0e1b      	lsrs	r3, r3, #24
 800384e:	f003 030f 	and.w	r3, r3, #15
 8003852:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003854:	4b32      	ldr	r3, [pc, #200]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385a:	0f1b      	lsrs	r3, r3, #28
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	019a      	lsls	r2, r3, #6
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	041b      	lsls	r3, r3, #16
 800386e:	431a      	orrs	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	061b      	lsls	r3, r3, #24
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	071b      	lsls	r3, r3, #28
 800387a:	4929      	ldr	r1, [pc, #164]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d028      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	0e1b      	lsrs	r3, r3, #24
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800389c:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a2:	0c1b      	lsrs	r3, r3, #16
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	019a      	lsls	r2, r3, #6
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	431a      	orrs	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	071b      	lsls	r3, r3, #28
 80038c2:	4917      	ldr	r1, [pc, #92]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80038ca:	4b15      	ldr	r3, [pc, #84]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d8:	4911      	ldr	r1, [pc, #68]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038e0:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fd f9e2 	bl	8000cb4 <HAL_GetTick>
 80038f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038f4:	f7fd f9de 	bl	8000cb4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e007      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003906:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003912:	d1ef      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b01      	cmp	r3, #1
 8003936:	d001      	beq.n	800393c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e04c      	b.n	80039d6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a26      	ldr	r2, [pc, #152]	; (80039e4 <HAL_TIM_Base_Start+0xc0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d022      	beq.n	8003994 <HAL_TIM_Base_Start+0x70>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d01d      	beq.n	8003994 <HAL_TIM_Base_Start+0x70>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a22      	ldr	r2, [pc, #136]	; (80039e8 <HAL_TIM_Base_Start+0xc4>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d018      	beq.n	8003994 <HAL_TIM_Base_Start+0x70>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	; (80039ec <HAL_TIM_Base_Start+0xc8>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_TIM_Base_Start+0x70>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1f      	ldr	r2, [pc, #124]	; (80039f0 <HAL_TIM_Base_Start+0xcc>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <HAL_TIM_Base_Start+0x70>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_TIM_Base_Start+0xd0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_TIM_Base_Start+0x70>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <HAL_TIM_Base_Start+0xd4>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_TIM_Base_Start+0x70>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_TIM_Base_Start+0xd8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d115      	bne.n	80039c0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_TIM_Base_Start+0xdc>)
 800399c:	4013      	ands	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d015      	beq.n	80039d2 <HAL_TIM_Base_Start+0xae>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ac:	d011      	beq.n	80039d2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039be:	e008      	b.n	80039d2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e000      	b.n	80039d4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40010400 	.word	0x40010400
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40001800 	.word	0x40001800
 8003a00:	00010007 	.word	0x00010007

08003a04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e049      	b.n	8003aaa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fc fff4 	bl	8000a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f000 fa44 	bl	8003ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d109      	bne.n	8003ad8 <HAL_TIM_PWM_Start+0x24>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e03c      	b.n	8003b52 <HAL_TIM_PWM_Start+0x9e>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d109      	bne.n	8003af2 <HAL_TIM_PWM_Start+0x3e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	bf14      	ite	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	2300      	moveq	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	e02f      	b.n	8003b52 <HAL_TIM_PWM_Start+0x9e>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d109      	bne.n	8003b0c <HAL_TIM_PWM_Start+0x58>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	e022      	b.n	8003b52 <HAL_TIM_PWM_Start+0x9e>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d109      	bne.n	8003b26 <HAL_TIM_PWM_Start+0x72>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	bf14      	ite	ne
 8003b1e:	2301      	movne	r3, #1
 8003b20:	2300      	moveq	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	e015      	b.n	8003b52 <HAL_TIM_PWM_Start+0x9e>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d109      	bne.n	8003b40 <HAL_TIM_PWM_Start+0x8c>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e008      	b.n	8003b52 <HAL_TIM_PWM_Start+0x9e>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e092      	b.n	8003c80 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <HAL_TIM_PWM_Start+0xb6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b68:	e023      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xfe>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xc6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b78:	e01b      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xfe>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0xd6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b88:	e013      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xfe>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0xe6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b98:	e00b      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xfe>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_PWM_Start+0xf6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ba8:	e003      	b.n	8003bb2 <HAL_TIM_PWM_Start+0xfe>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	6839      	ldr	r1, [r7, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 fc86 	bl	80044cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	; (8003c88 <HAL_TIM_PWM_Start+0x1d4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d004      	beq.n	8003bd4 <HAL_TIM_PWM_Start+0x120>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a2f      	ldr	r2, [pc, #188]	; (8003c8c <HAL_TIM_PWM_Start+0x1d8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_PWM_Start+0x124>
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e000      	b.n	8003bda <HAL_TIM_PWM_Start+0x126>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a25      	ldr	r2, [pc, #148]	; (8003c88 <HAL_TIM_PWM_Start+0x1d4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x18a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c00:	d01d      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x18a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a22      	ldr	r2, [pc, #136]	; (8003c90 <HAL_TIM_PWM_Start+0x1dc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d018      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x18a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <HAL_TIM_PWM_Start+0x1e0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d013      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x18a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a1f      	ldr	r2, [pc, #124]	; (8003c98 <HAL_TIM_PWM_Start+0x1e4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00e      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x18a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <HAL_TIM_PWM_Start+0x1d8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d009      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x18a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a1b      	ldr	r2, [pc, #108]	; (8003c9c <HAL_TIM_PWM_Start+0x1e8>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d004      	beq.n	8003c3e <HAL_TIM_PWM_Start+0x18a>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_TIM_PWM_Start+0x1ec>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d115      	bne.n	8003c6a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <HAL_TIM_PWM_Start+0x1f0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b06      	cmp	r3, #6
 8003c4e:	d015      	beq.n	8003c7c <HAL_TIM_PWM_Start+0x1c8>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d011      	beq.n	8003c7c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c68:	e008      	b.n	8003c7c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e000      	b.n	8003c7e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c7c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	40010400 	.word	0x40010400
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40000800 	.word	0x40000800
 8003c98:	40000c00 	.word	0x40000c00
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	40001800 	.word	0x40001800
 8003ca4:	00010007 	.word	0x00010007

08003ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0ff      	b.n	8003ec6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b14      	cmp	r3, #20
 8003cd2:	f200 80f0 	bhi.w	8003eb6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003cd6:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cdc:	08003d31 	.word	0x08003d31
 8003ce0:	08003eb7 	.word	0x08003eb7
 8003ce4:	08003eb7 	.word	0x08003eb7
 8003ce8:	08003eb7 	.word	0x08003eb7
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003eb7 	.word	0x08003eb7
 8003cf4:	08003eb7 	.word	0x08003eb7
 8003cf8:	08003eb7 	.word	0x08003eb7
 8003cfc:	08003db3 	.word	0x08003db3
 8003d00:	08003eb7 	.word	0x08003eb7
 8003d04:	08003eb7 	.word	0x08003eb7
 8003d08:	08003eb7 	.word	0x08003eb7
 8003d0c:	08003df3 	.word	0x08003df3
 8003d10:	08003eb7 	.word	0x08003eb7
 8003d14:	08003eb7 	.word	0x08003eb7
 8003d18:	08003eb7 	.word	0x08003eb7
 8003d1c:	08003e35 	.word	0x08003e35
 8003d20:	08003eb7 	.word	0x08003eb7
 8003d24:	08003eb7 	.word	0x08003eb7
 8003d28:	08003eb7 	.word	0x08003eb7
 8003d2c:	08003e75 	.word	0x08003e75
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68b9      	ldr	r1, [r7, #8]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 f96a 	bl	8004010 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0208 	orr.w	r2, r2, #8
 8003d4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f022 0204 	bic.w	r2, r2, #4
 8003d5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6999      	ldr	r1, [r3, #24]
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	691a      	ldr	r2, [r3, #16]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	619a      	str	r2, [r3, #24]
      break;
 8003d6e:	e0a5      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68b9      	ldr	r1, [r7, #8]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f9bc 	bl	80040f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699a      	ldr	r2, [r3, #24]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6999      	ldr	r1, [r3, #24]
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	021a      	lsls	r2, r3, #8
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	619a      	str	r2, [r3, #24]
      break;
 8003db0:	e084      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fa13 	bl	80041e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0208 	orr.w	r2, r2, #8
 8003dcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0204 	bic.w	r2, r2, #4
 8003ddc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	61da      	str	r2, [r3, #28]
      break;
 8003df0:	e064      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 fa69 	bl	80042d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69da      	ldr	r2, [r3, #28]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69d9      	ldr	r1, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	021a      	lsls	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	61da      	str	r2, [r3, #28]
      break;
 8003e32:	e043      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 faa0 	bl	8004380 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	691a      	ldr	r2, [r3, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003e72:	e023      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fad2 	bl	8004424 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	021a      	lsls	r2, r3, #8
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003eb4:	e002      	b.n	8003ebc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8003eba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop

08003ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3d      	ldr	r2, [pc, #244]	; (8003fe8 <TIM_Base_SetConfig+0x118>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a3b      	ldr	r2, [pc, #236]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a3a      	ldr	r2, [pc, #232]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2f      	ldr	r2, [pc, #188]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d02b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d027      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2c      	ldr	r2, [pc, #176]	; (8003fe8 <TIM_Base_SetConfig+0x118>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d023      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <TIM_Base_SetConfig+0x11c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d01f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <TIM_Base_SetConfig+0x120>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a29      	ldr	r2, [pc, #164]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d017      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <TIM_Base_SetConfig+0x128>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d013      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a27      	ldr	r2, [pc, #156]	; (8003ffc <TIM_Base_SetConfig+0x12c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d00f      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <TIM_Base_SetConfig+0x130>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d00b      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <TIM_Base_SetConfig+0x134>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d007      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a24      	ldr	r2, [pc, #144]	; (8004008 <TIM_Base_SetConfig+0x138>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d003      	beq.n	8003f82 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	; (800400c <TIM_Base_SetConfig+0x13c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d108      	bne.n	8003f94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <TIM_Base_SetConfig+0x114>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d003      	beq.n	8003fc8 <TIM_Base_SetConfig+0xf8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <TIM_Base_SetConfig+0x124>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40010000 	.word	0x40010000
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800
 8003ff0:	40000c00 	.word	0x40000c00
 8003ff4:	40010400 	.word	0x40010400
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800
 8004004:	40001800 	.word	0x40001800
 8004008:	40001c00 	.word	0x40001c00
 800400c:	40002000 	.word	0x40002000

08004010 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4b2b      	ldr	r3, [pc, #172]	; (80040e8 <TIM_OC1_SetConfig+0xd8>)
 800403c:	4013      	ands	r3, r2
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0303 	bic.w	r3, r3, #3
 8004046:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f023 0302 	bic.w	r3, r3, #2
 8004058:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a21      	ldr	r2, [pc, #132]	; (80040ec <TIM_OC1_SetConfig+0xdc>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d003      	beq.n	8004074 <TIM_OC1_SetConfig+0x64>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <TIM_OC1_SetConfig+0xe0>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10c      	bne.n	800408e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0308 	bic.w	r3, r3, #8
 800407a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a16      	ldr	r2, [pc, #88]	; (80040ec <TIM_OC1_SetConfig+0xdc>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_OC1_SetConfig+0x8e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <TIM_OC1_SetConfig+0xe0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d111      	bne.n	80040c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	693a      	ldr	r2, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	621a      	str	r2, [r3, #32]
}
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	fffeff8f 	.word	0xfffeff8f
 80040ec:	40010000 	.word	0x40010000
 80040f0:	40010400 	.word	0x40010400

080040f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0210 	bic.w	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <TIM_OC2_SetConfig+0xe4>)
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800412a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0320 	bic.w	r3, r3, #32
 800413e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a23      	ldr	r2, [pc, #140]	; (80041dc <TIM_OC2_SetConfig+0xe8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d003      	beq.n	800415c <TIM_OC2_SetConfig+0x68>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a22      	ldr	r2, [pc, #136]	; (80041e0 <TIM_OC2_SetConfig+0xec>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10d      	bne.n	8004178 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004176:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <TIM_OC2_SetConfig+0xe8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d003      	beq.n	8004188 <TIM_OC2_SetConfig+0x94>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <TIM_OC2_SetConfig+0xec>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d113      	bne.n	80041b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800418e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004196:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	feff8fff 	.word	0xfeff8fff
 80041dc:	40010000 	.word	0x40010000
 80041e0:	40010400 	.word	0x40010400

080041e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4b2d      	ldr	r3, [pc, #180]	; (80042c4 <TIM_OC3_SetConfig+0xe0>)
 8004210:	4013      	ands	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800422c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a22      	ldr	r2, [pc, #136]	; (80042c8 <TIM_OC3_SetConfig+0xe4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_OC3_SetConfig+0x66>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a21      	ldr	r2, [pc, #132]	; (80042cc <TIM_OC3_SetConfig+0xe8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d10d      	bne.n	8004266 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a17      	ldr	r2, [pc, #92]	; (80042c8 <TIM_OC3_SetConfig+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_OC3_SetConfig+0x92>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a16      	ldr	r2, [pc, #88]	; (80042cc <TIM_OC3_SetConfig+0xe8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d113      	bne.n	800429e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800427c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	621a      	str	r2, [r3, #32]
}
 80042b8:	bf00      	nop
 80042ba:	371c      	adds	r7, #28
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	fffeff8f 	.word	0xfffeff8f
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40010400 	.word	0x40010400

080042d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b087      	sub	sp, #28
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4b1e      	ldr	r3, [pc, #120]	; (8004374 <TIM_OC4_SetConfig+0xa4>)
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800431a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	031b      	lsls	r3, r3, #12
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a13      	ldr	r2, [pc, #76]	; (8004378 <TIM_OC4_SetConfig+0xa8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <TIM_OC4_SetConfig+0x68>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a12      	ldr	r2, [pc, #72]	; (800437c <TIM_OC4_SetConfig+0xac>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d109      	bne.n	800434c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800433e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	019b      	lsls	r3, r3, #6
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	feff8fff 	.word	0xfeff8fff
 8004378:	40010000 	.word	0x40010000
 800437c:	40010400 	.word	0x40010400

08004380 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <TIM_OC5_SetConfig+0x98>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80043c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	041b      	lsls	r3, r3, #16
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a12      	ldr	r2, [pc, #72]	; (800441c <TIM_OC5_SetConfig+0x9c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d003      	beq.n	80043de <TIM_OC5_SetConfig+0x5e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a11      	ldr	r2, [pc, #68]	; (8004420 <TIM_OC5_SetConfig+0xa0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d109      	bne.n	80043f2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	621a      	str	r2, [r3, #32]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	fffeff8f 	.word	0xfffeff8f
 800441c:	40010000 	.word	0x40010000
 8004420:	40010400 	.word	0x40010400

08004424 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4b1c      	ldr	r3, [pc, #112]	; (80044c0 <TIM_OC6_SetConfig+0x9c>)
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	051b      	lsls	r3, r3, #20
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <TIM_OC6_SetConfig+0xa0>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_OC6_SetConfig+0x60>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a12      	ldr	r2, [pc, #72]	; (80044c8 <TIM_OC6_SetConfig+0xa4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d109      	bne.n	8004498 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	029b      	lsls	r3, r3, #10
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	feff8fff 	.word	0xfeff8fff
 80044c4:	40010000 	.word	0x40010000
 80044c8:	40010400 	.word	0x40010400

080044cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f003 031f 	and.w	r3, r3, #31
 80044de:	2201      	movs	r2, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	401a      	ands	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1a      	ldr	r2, [r3, #32]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	fa01 f303 	lsl.w	r3, r1, r3
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
	...

08004518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800452c:	2302      	movs	r3, #2
 800452e:	e06d      	b.n	800460c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a30      	ldr	r2, [pc, #192]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a2f      	ldr	r2, [pc, #188]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d108      	bne.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800456a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a20      	ldr	r2, [pc, #128]	; (8004618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d01d      	beq.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1a      	ldr	r2, [pc, #104]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d10c      	bne.n	80045fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40010000 	.word	0x40010000
 800461c:	40010400 	.word	0x40010400
 8004620:	40000400 	.word	0x40000400
 8004624:	40000800 	.word	0x40000800
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40014000 	.word	0x40014000
 8004630:	40001800 	.word	0x40001800

08004634 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004634:	b084      	sub	sp, #16
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	f107 001c 	add.w	r0, r7, #28
 8004642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	2b01      	cmp	r3, #1
 800464a:	d120      	bne.n	800468e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <USB_CoreInit+0xac>)
 800465e:	4013      	ands	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f001 fbee 	bl	8005e64 <USB_CoreReset>
 8004688:	4603      	mov	r3, r0
 800468a:	73fb      	strb	r3, [r7, #15]
 800468c:	e010      	b.n	80046b0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f001 fbe2 	bl	8005e64 <USB_CoreReset>
 80046a0:	4603      	mov	r3, r0
 80046a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d10b      	bne.n	80046ce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f043 0206 	orr.w	r2, r3, #6
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046da:	b004      	add	sp, #16
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	ffbdffbf 	.word	0xffbdffbf

080046e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d165      	bne.n	80047c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4a41      	ldr	r2, [pc, #260]	; (8004800 <USB_SetTurnaroundTime+0x11c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d906      	bls.n	800470e <USB_SetTurnaroundTime+0x2a>
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	4a40      	ldr	r2, [pc, #256]	; (8004804 <USB_SetTurnaroundTime+0x120>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d202      	bcs.n	800470e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004708:	230f      	movs	r3, #15
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e062      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4a3c      	ldr	r2, [pc, #240]	; (8004804 <USB_SetTurnaroundTime+0x120>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d306      	bcc.n	8004724 <USB_SetTurnaroundTime+0x40>
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4a3b      	ldr	r2, [pc, #236]	; (8004808 <USB_SetTurnaroundTime+0x124>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d202      	bcs.n	8004724 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800471e:	230e      	movs	r3, #14
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	e057      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a38      	ldr	r2, [pc, #224]	; (8004808 <USB_SetTurnaroundTime+0x124>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d306      	bcc.n	800473a <USB_SetTurnaroundTime+0x56>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	4a37      	ldr	r2, [pc, #220]	; (800480c <USB_SetTurnaroundTime+0x128>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d202      	bcs.n	800473a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004734:	230d      	movs	r3, #13
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e04c      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4a33      	ldr	r2, [pc, #204]	; (800480c <USB_SetTurnaroundTime+0x128>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d306      	bcc.n	8004750 <USB_SetTurnaroundTime+0x6c>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	4a32      	ldr	r2, [pc, #200]	; (8004810 <USB_SetTurnaroundTime+0x12c>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d802      	bhi.n	8004750 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800474a:	230c      	movs	r3, #12
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e041      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a2f      	ldr	r2, [pc, #188]	; (8004810 <USB_SetTurnaroundTime+0x12c>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d906      	bls.n	8004766 <USB_SetTurnaroundTime+0x82>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <USB_SetTurnaroundTime+0x130>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d802      	bhi.n	8004766 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004760:	230b      	movs	r3, #11
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	e036      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <USB_SetTurnaroundTime+0x130>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d906      	bls.n	800477c <USB_SetTurnaroundTime+0x98>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4a29      	ldr	r2, [pc, #164]	; (8004818 <USB_SetTurnaroundTime+0x134>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d802      	bhi.n	800477c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004776:	230a      	movs	r3, #10
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e02b      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4a26      	ldr	r2, [pc, #152]	; (8004818 <USB_SetTurnaroundTime+0x134>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d906      	bls.n	8004792 <USB_SetTurnaroundTime+0xae>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4a25      	ldr	r2, [pc, #148]	; (800481c <USB_SetTurnaroundTime+0x138>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d202      	bcs.n	8004792 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800478c:	2309      	movs	r3, #9
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e020      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a21      	ldr	r2, [pc, #132]	; (800481c <USB_SetTurnaroundTime+0x138>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d306      	bcc.n	80047a8 <USB_SetTurnaroundTime+0xc4>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4a20      	ldr	r2, [pc, #128]	; (8004820 <USB_SetTurnaroundTime+0x13c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d802      	bhi.n	80047a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047a2:	2308      	movs	r3, #8
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e015      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4a1d      	ldr	r2, [pc, #116]	; (8004820 <USB_SetTurnaroundTime+0x13c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d906      	bls.n	80047be <USB_SetTurnaroundTime+0xda>
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4a1c      	ldr	r2, [pc, #112]	; (8004824 <USB_SetTurnaroundTime+0x140>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d202      	bcs.n	80047be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047b8:	2307      	movs	r3, #7
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e00a      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047be:	2306      	movs	r3, #6
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e007      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047ca:	2309      	movs	r3, #9
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e001      	b.n	80047d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047d0:	2309      	movs	r3, #9
 80047d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	029b      	lsls	r3, r3, #10
 80047e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047ec:	431a      	orrs	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	00d8acbf 	.word	0x00d8acbf
 8004804:	00e4e1c0 	.word	0x00e4e1c0
 8004808:	00f42400 	.word	0x00f42400
 800480c:	01067380 	.word	0x01067380
 8004810:	011a499f 	.word	0x011a499f
 8004814:	01312cff 	.word	0x01312cff
 8004818:	014ca43f 	.word	0x014ca43f
 800481c:	016e3600 	.word	0x016e3600
 8004820:	01a6ab1f 	.word	0x01a6ab1f
 8004824:	01e84800 	.word	0x01e84800

08004828 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f043 0201 	orr.w	r2, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800484a:	b480      	push	{r7}
 800484c:	b083      	sub	sp, #12
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 0201 	bic.w	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d115      	bne.n	80048ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800489a:	2001      	movs	r0, #1
 800489c:	f7fc fa16 	bl	8000ccc <HAL_Delay>
      ms++;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f001 fa4b 	bl	8005d42 <USB_GetMode>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d01e      	beq.n	80048f0 <USB_SetCurrentMode+0x84>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b31      	cmp	r3, #49	; 0x31
 80048b6:	d9f0      	bls.n	800489a <USB_SetCurrentMode+0x2e>
 80048b8:	e01a      	b.n	80048f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048ba:	78fb      	ldrb	r3, [r7, #3]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d115      	bne.n	80048ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048cc:	2001      	movs	r0, #1
 80048ce:	f7fc f9fd 	bl	8000ccc <HAL_Delay>
      ms++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f001 fa32 	bl	8005d42 <USB_GetMode>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <USB_SetCurrentMode+0x84>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b31      	cmp	r3, #49	; 0x31
 80048e8:	d9f0      	bls.n	80048cc <USB_SetCurrentMode+0x60>
 80048ea:	e001      	b.n	80048f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e005      	b.n	80048fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2b32      	cmp	r3, #50	; 0x32
 80048f4:	d101      	bne.n	80048fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004904:	b084      	sub	sp, #16
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004912:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800491e:	2300      	movs	r3, #0
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	e009      	b.n	8004938 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	3340      	adds	r3, #64	; 0x40
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	2200      	movs	r2, #0
 8004930:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	3301      	adds	r3, #1
 8004936:	613b      	str	r3, [r7, #16]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b0e      	cmp	r3, #14
 800493c:	d9f2      	bls.n	8004924 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800493e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d11c      	bne.n	800497e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004952:	f043 0302 	orr.w	r3, r3, #2
 8004956:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e005      	b.n	800498a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004990:	461a      	mov	r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499c:	4619      	mov	r1, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	461a      	mov	r2, r3
 80049a6:	680b      	ldr	r3, [r1, #0]
 80049a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d10c      	bne.n	80049ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049b6:	2100      	movs	r1, #0
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f965 	bl	8004c88 <USB_SetDevSpeed>
 80049be:	e008      	b.n	80049d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049c0:	2101      	movs	r1, #1
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f960 	bl	8004c88 <USB_SetDevSpeed>
 80049c8:	e003      	b.n	80049d2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049ca:	2103      	movs	r1, #3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f95b 	bl	8004c88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049d2:	2110      	movs	r1, #16
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 f8f3 	bl	8004bc0 <USB_FlushTxFifo>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f91f 	bl	8004c28 <USB_FlushRxFifo>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fa:	461a      	mov	r2, r3
 80049fc:	2300      	movs	r3, #0
 80049fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	461a      	mov	r2, r3
 8004a08:	2300      	movs	r3, #0
 8004a0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a12:	461a      	mov	r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	613b      	str	r3, [r7, #16]
 8004a1c:	e043      	b.n	8004aa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a34:	d118      	bne.n	8004a68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	461a      	mov	r2, r3
 8004a4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	e013      	b.n	8004a7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	e008      	b.n	8004a7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	461a      	mov	r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	613b      	str	r3, [r7, #16]
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d3b7      	bcc.n	8004a1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
 8004ab2:	e043      	b.n	8004b3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aca:	d118      	bne.n	8004afe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ade:	461a      	mov	r2, r3
 8004ae0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e013      	b.n	8004b10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	461a      	mov	r2, r3
 8004af6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	e008      	b.n	8004b10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	2300      	movs	r3, #0
 8004b20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	461a      	mov	r2, r3
 8004b30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d3b7      	bcc.n	8004ab4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	f043 0210 	orr.w	r2, r3, #16
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <USB_DevInit+0x2b4>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f043 0208 	orr.w	r2, r3, #8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d105      	bne.n	8004ba8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	699a      	ldr	r2, [r3, #24]
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <USB_DevInit+0x2b8>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb4:	b004      	add	sp, #16
 8004bb6:	4770      	bx	lr
 8004bb8:	803c3800 	.word	0x803c3800
 8004bbc:	40000004 	.word	0x40000004

08004bc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4a13      	ldr	r2, [pc, #76]	; (8004c24 <USB_FlushTxFifo+0x64>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e01b      	b.n	8004c18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	daf2      	bge.n	8004bce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	019b      	lsls	r3, r3, #6
 8004bf0:	f043 0220 	orr.w	r2, r3, #32
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <USB_FlushTxFifo+0x64>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e006      	b.n	8004c18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b20      	cmp	r3, #32
 8004c14:	d0f0      	beq.n	8004bf8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	00030d40 	.word	0x00030d40

08004c28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	3301      	adds	r3, #1
 8004c38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <USB_FlushRxFifo+0x5c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d901      	bls.n	8004c46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e018      	b.n	8004c78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	daf2      	bge.n	8004c34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2210      	movs	r2, #16
 8004c56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <USB_FlushRxFifo+0x5c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e006      	b.n	8004c78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d0f0      	beq.n	8004c58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	00030d40 	.word	0x00030d40

08004c88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	68f9      	ldr	r1, [r7, #12]
 8004ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0306 	and.w	r3, r3, #6
 8004cd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d102      	bne.n	8004ce0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
 8004cde:	e00a      	b.n	8004cf6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d002      	beq.n	8004cec <USB_GetDevSpeed+0x32>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b06      	cmp	r3, #6
 8004cea:	d102      	bne.n	8004cf2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cec:	2302      	movs	r3, #2
 8004cee:	75fb      	strb	r3, [r7, #23]
 8004cf0:	e001      	b.n	8004cf6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cf2:	230f      	movs	r3, #15
 8004cf4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d139      	bne.n	8004d94 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d153      	bne.n	8004e00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	059b      	lsls	r3, r3, #22
 8004d7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	0159      	lsls	r1, r3, #5
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	440b      	add	r3, r1
 8004d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <USB_ActivateEndpoint+0x10c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
 8004d92:	e035      	b.n	8004e00 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	f003 030f 	and.w	r3, r3, #15
 8004da4:	2101      	movs	r1, #1
 8004da6:	fa01 f303 	lsl.w	r3, r1, r3
 8004daa:	041b      	lsls	r3, r3, #16
 8004dac:	68f9      	ldr	r1, [r7, #12]
 8004dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d119      	bne.n	8004e00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	791b      	ldrb	r3, [r3, #4]
 8004de6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004de8:	430b      	orrs	r3, r1
 8004dea:	431a      	orrs	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	0159      	lsls	r1, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	440b      	add	r3, r1
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <USB_ActivateEndpoint+0x10c>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	10008000 	.word	0x10008000

08004e14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d161      	bne.n	8004ef4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e46:	d11f      	bne.n	8004e88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	2101      	movs	r1, #1
 8004e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	68f9      	ldr	r1, [r7, #12]
 8004ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb2:	69da      	ldr	r2, [r3, #28]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	43db      	mvns	r3, r3
 8004ec6:	68f9      	ldr	r1, [r7, #12]
 8004ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	0159      	lsls	r1, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	440b      	add	r3, r1
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eea:	4619      	mov	r1, r3
 8004eec:	4b35      	ldr	r3, [pc, #212]	; (8004fc4 <USB_DeactivateEndpoint+0x1b0>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]
 8004ef2:	e060      	b.n	8004fb6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0a:	d11f      	bne.n	8004f4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	0151      	lsls	r1, r2, #5
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	440a      	add	r2, r1
 8004f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	f003 030f 	and.w	r3, r3, #15
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	43db      	mvns	r3, r3
 8004f66:	68f9      	ldr	r1, [r7, #12]
 8004f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	2101      	movs	r1, #1
 8004f82:	fa01 f303 	lsl.w	r3, r1, r3
 8004f86:	041b      	lsls	r3, r3, #16
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f90:	4013      	ands	r3, r2
 8004f92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	0159      	lsls	r1, r3, #5
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	440b      	add	r3, r1
 8004faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <USB_DeactivateEndpoint+0x1b4>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr
 8004fc4:	ec337800 	.word	0xec337800
 8004fc8:	eff37800 	.word	0xeff37800

08004fcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	785b      	ldrb	r3, [r3, #1]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	f040 8163 	bne.w	80052b4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d132      	bne.n	800505c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	440b      	add	r3, r1
 800500c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005010:	4619      	mov	r1, r3
 8005012:	4ba5      	ldr	r3, [pc, #660]	; (80052a8 <USB_EPStartXfer+0x2dc>)
 8005014:	4013      	ands	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	0151      	lsls	r1, r2, #5
 800502a:	69fa      	ldr	r2, [r7, #28]
 800502c:	440a      	add	r2, r1
 800502e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005032:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	691a      	ldr	r2, [r3, #16]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	0159      	lsls	r1, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	440b      	add	r3, r1
 800504e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005052:	4619      	mov	r1, r3
 8005054:	4b95      	ldr	r3, [pc, #596]	; (80052ac <USB_EPStartXfer+0x2e0>)
 8005056:	4013      	ands	r3, r2
 8005058:	610b      	str	r3, [r1, #16]
 800505a:	e074      	b.n	8005146 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005068:	691a      	ldr	r2, [r3, #16]
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	0159      	lsls	r1, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	440b      	add	r3, r1
 8005072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005076:	4619      	mov	r1, r3
 8005078:	4b8c      	ldr	r3, [pc, #560]	; (80052ac <USB_EPStartXfer+0x2e0>)
 800507a:	4013      	ands	r3, r2
 800507c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	0159      	lsls	r1, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	440b      	add	r3, r1
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	4619      	mov	r1, r3
 800509a:	4b83      	ldr	r3, [pc, #524]	; (80052a8 <USB_EPStartXfer+0x2dc>)
 800509c:	4013      	ands	r3, r2
 800509e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	015a      	lsls	r2, r3, #5
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	6999      	ldr	r1, [r3, #24]
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	440b      	add	r3, r1
 80050b8:	1e59      	subs	r1, r3, #1
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	fbb1 f3f3 	udiv	r3, r1, r3
 80050c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050c4:	4b7a      	ldr	r3, [pc, #488]	; (80052b0 <USB_EPStartXfer+0x2e4>)
 80050c6:	400b      	ands	r3, r1
 80050c8:	69b9      	ldr	r1, [r7, #24]
 80050ca:	0148      	lsls	r0, r1, #5
 80050cc:	69f9      	ldr	r1, [r7, #28]
 80050ce:	4401      	add	r1, r0
 80050d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050d4:	4313      	orrs	r3, r2
 80050d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e4:	691a      	ldr	r2, [r3, #16]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ee:	69b9      	ldr	r1, [r7, #24]
 80050f0:	0148      	lsls	r0, r1, #5
 80050f2:	69f9      	ldr	r1, [r7, #28]
 80050f4:	4401      	add	r1, r0
 80050f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050fa:	4313      	orrs	r3, r2
 80050fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	791b      	ldrb	r3, [r3, #4]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d11f      	bne.n	8005146 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	015a      	lsls	r2, r3, #5
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	4413      	add	r3, r2
 800510e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	0151      	lsls	r1, r2, #5
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	440a      	add	r2, r1
 800511c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005120:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005124:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	69fa      	ldr	r2, [r7, #28]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005144:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005146:	79fb      	ldrb	r3, [r7, #7]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d14b      	bne.n	80051e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d009      	beq.n	8005168 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	791b      	ldrb	r3, [r3, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d128      	bne.n	80051c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d110      	bne.n	80051a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e00f      	b.n	80051c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051e0:	6013      	str	r3, [r2, #0]
 80051e2:	e137      	b.n	8005454 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005202:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	791b      	ldrb	r3, [r3, #4]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d015      	beq.n	8005238 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 811f 	beq.w	8005454 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	2101      	movs	r1, #1
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	69f9      	ldr	r1, [r7, #28]
 800522e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005232:	4313      	orrs	r3, r2
 8005234:	634b      	str	r3, [r1, #52]	; 0x34
 8005236:	e10d      	b.n	8005454 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d110      	bne.n	800526a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	440a      	add	r2, r1
 800525e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005262:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e00f      	b.n	800528a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	69fa      	ldr	r2, [r7, #28]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005288:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6919      	ldr	r1, [r3, #16]
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	b298      	uxth	r0, r3
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	4603      	mov	r3, r0
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 faea 	bl	8005878 <USB_WritePacket>
 80052a4:	e0d6      	b.n	8005454 <USB_EPStartXfer+0x488>
 80052a6:	bf00      	nop
 80052a8:	e007ffff 	.word	0xe007ffff
 80052ac:	fff80000 	.word	0xfff80000
 80052b0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	0159      	lsls	r1, r3, #5
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	440b      	add	r3, r1
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	4619      	mov	r1, r3
 80052d0:	4b63      	ldr	r3, [pc, #396]	; (8005460 <USB_EPStartXfer+0x494>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	0159      	lsls	r1, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	440b      	add	r3, r1
 80052ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f0:	4619      	mov	r1, r3
 80052f2:	4b5c      	ldr	r3, [pc, #368]	; (8005464 <USB_EPStartXfer+0x498>)
 80052f4:	4013      	ands	r3, r2
 80052f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d123      	bne.n	8005348 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005300:	69bb      	ldr	r3, [r7, #24]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005316:	69b9      	ldr	r1, [r7, #24]
 8005318:	0148      	lsls	r0, r1, #5
 800531a:	69f9      	ldr	r1, [r7, #28]
 800531c:	4401      	add	r1, r0
 800531e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005322:	4313      	orrs	r3, r2
 8005324:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005340:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005344:	6113      	str	r3, [r2, #16]
 8005346:	e037      	b.n	80053b8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4413      	add	r3, r2
 8005352:	1e5a      	subs	r2, r3, #1
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	fbb2 f3f3 	udiv	r3, r2, r3
 800535c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	8afa      	ldrh	r2, [r7, #22]
 8005364:	fb03 f202 	mul.w	r2, r3, r2
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	04d9      	lsls	r1, r3, #19
 800537e:	4b3a      	ldr	r3, [pc, #232]	; (8005468 <USB_EPStartXfer+0x49c>)
 8005380:	400b      	ands	r3, r1
 8005382:	69b9      	ldr	r1, [r7, #24]
 8005384:	0148      	lsls	r0, r1, #5
 8005386:	69f9      	ldr	r1, [r7, #28]
 8005388:	4401      	add	r1, r0
 800538a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800538e:	4313      	orrs	r3, r2
 8005390:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a8:	69b9      	ldr	r1, [r7, #24]
 80053aa:	0148      	lsls	r0, r1, #5
 80053ac:	69f9      	ldr	r1, [r7, #28]
 80053ae:	4401      	add	r1, r0
 80053b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053b4:	4313      	orrs	r3, r2
 80053b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d10d      	bne.n	80053da <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	6919      	ldr	r1, [r3, #16]
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	460a      	mov	r2, r1
 80053d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d128      	bne.n	8005434 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d110      	bne.n	8005414 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	e00f      	b.n	8005434 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	0151      	lsls	r1, r2, #5
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	440a      	add	r2, r1
 800542a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005432:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	015a      	lsls	r2, r3, #5
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	4413      	add	r3, r2
 800543c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69ba      	ldr	r2, [r7, #24]
 8005444:	0151      	lsls	r1, r2, #5
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	440a      	add	r2, r1
 800544a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800544e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005452:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	fff80000 	.word	0xfff80000
 8005464:	e007ffff 	.word	0xe007ffff
 8005468:	1ff80000 	.word	0x1ff80000

0800546c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	4613      	mov	r3, r2
 8005478:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	2b01      	cmp	r3, #1
 800548a:	f040 80ce 	bne.w	800562a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d132      	bne.n	80054fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	4413      	add	r3, r2
 800549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	0159      	lsls	r1, r3, #5
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	440b      	add	r3, r1
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	4619      	mov	r1, r3
 80054b2:	4b9a      	ldr	r3, [pc, #616]	; (800571c <USB_EP0StartXfer+0x2b0>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	0159      	lsls	r1, r3, #5
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	440b      	add	r3, r1
 80054ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f2:	4619      	mov	r1, r3
 80054f4:	4b8a      	ldr	r3, [pc, #552]	; (8005720 <USB_EP0StartXfer+0x2b4>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	610b      	str	r3, [r1, #16]
 80054fa:	e04e      	b.n	800559a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	0159      	lsls	r1, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	440b      	add	r3, r1
 8005512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005516:	4619      	mov	r1, r3
 8005518:	4b81      	ldr	r3, [pc, #516]	; (8005720 <USB_EP0StartXfer+0x2b4>)
 800551a:	4013      	ands	r3, r2
 800551c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	0159      	lsls	r1, r3, #5
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	440b      	add	r3, r1
 8005534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005538:	4619      	mov	r1, r3
 800553a:	4b78      	ldr	r3, [pc, #480]	; (800571c <USB_EP0StartXfer+0x2b0>)
 800553c:	4013      	ands	r3, r2
 800553e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d903      	bls.n	8005554 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800556e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005572:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800558a:	6939      	ldr	r1, [r7, #16]
 800558c:	0148      	lsls	r0, r1, #5
 800558e:	6979      	ldr	r1, [r7, #20]
 8005590:	4401      	add	r1, r0
 8005592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005596:	4313      	orrs	r3, r2
 8005598:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800559a:	79fb      	ldrb	r3, [r7, #7]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d11e      	bne.n	80055de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	461a      	mov	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	0151      	lsls	r1, r2, #5
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	440a      	add	r2, r1
 80055d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	e097      	b.n	800570e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	699b      	ldr	r3, [r3, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8083 	beq.w	800570e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800560e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	2101      	movs	r1, #1
 800561a:	fa01 f303 	lsl.w	r3, r1, r3
 800561e:	6979      	ldr	r1, [r7, #20]
 8005620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005624:	4313      	orrs	r3, r2
 8005626:	634b      	str	r3, [r1, #52]	; 0x34
 8005628:	e071      	b.n	800570e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	0159      	lsls	r1, r3, #5
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	440b      	add	r3, r1
 8005640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005644:	4619      	mov	r1, r3
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <USB_EP0StartXfer+0x2b4>)
 8005648:	4013      	ands	r3, r2
 800564a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005658:	691a      	ldr	r2, [r3, #16]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	0159      	lsls	r1, r3, #5
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	440b      	add	r3, r1
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	4619      	mov	r1, r3
 8005668:	4b2c      	ldr	r3, [pc, #176]	; (800571c <USB_EP0StartXfer+0x2b0>)
 800566a:	4013      	ands	r3, r2
 800566c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d003      	beq.n	800567e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	440a      	add	r2, r1
 800569c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056bc:	6939      	ldr	r1, [r7, #16]
 80056be:	0148      	lsls	r0, r1, #5
 80056c0:	6979      	ldr	r1, [r7, #20]
 80056c2:	4401      	add	r1, r0
 80056c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056c8:	4313      	orrs	r3, r2
 80056ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80056cc:	79fb      	ldrb	r3, [r7, #7]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d10d      	bne.n	80056ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	6919      	ldr	r1, [r3, #16]
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	015a      	lsls	r2, r3, #5
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	4413      	add	r3, r2
 80056e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ea:	460a      	mov	r2, r1
 80056ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	015a      	lsls	r2, r3, #5
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	4413      	add	r3, r2
 80056f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800570c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	e007ffff 	.word	0xe007ffff
 8005720:	fff80000 	.word	0xfff80000

08005724 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005732:	2300      	movs	r3, #0
 8005734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d14a      	bne.n	80057d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800575a:	f040 8086 	bne.w	800586a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	7812      	ldrb	r2, [r2, #0]
 8005772:	0151      	lsls	r1, r2, #5
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	440a      	add	r2, r1
 8005778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800577c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005780:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	440a      	add	r2, r1
 800579c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3301      	adds	r3, #1
 80057aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d902      	bls.n	80057bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
          break;
 80057ba:	e056      	b.n	800586a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d4:	d0e7      	beq.n	80057a6 <USB_EPStopXfer+0x82>
 80057d6:	e048      	b.n	800586a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057f0:	d13b      	bne.n	800586a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005810:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005814:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	7812      	ldrb	r2, [r2, #0]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005838:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3301      	adds	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f242 7210 	movw	r2, #10000	; 0x2710
 8005846:	4293      	cmp	r3, r2
 8005848:	d902      	bls.n	8005850 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
          break;
 800584e:	e00c      	b.n	800586a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005868:	d0e7      	beq.n	800583a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
}
 800586c:	4618      	mov	r0, r3
 800586e:	371c      	adds	r7, #28
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005878:	b480      	push	{r7}
 800587a:	b089      	sub	sp, #36	; 0x24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4611      	mov	r1, r2
 8005884:	461a      	mov	r2, r3
 8005886:	460b      	mov	r3, r1
 8005888:	71fb      	strb	r3, [r7, #7]
 800588a:	4613      	mov	r3, r2
 800588c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d123      	bne.n	80058e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800589e:	88bb      	ldrh	r3, [r7, #4]
 80058a0:	3303      	adds	r3, #3
 80058a2:	089b      	lsrs	r3, r3, #2
 80058a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	e018      	b.n	80058de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	031a      	lsls	r2, r3, #12
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b8:	461a      	mov	r2, r3
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	3301      	adds	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	3301      	adds	r3, #1
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d3e2      	bcc.n	80058ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3724      	adds	r7, #36	; 0x24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b08b      	sub	sp, #44	; 0x2c
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800590a:	88fb      	ldrh	r3, [r7, #6]
 800590c:	089b      	lsrs	r3, r3, #2
 800590e:	b29b      	uxth	r3, r3
 8005910:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005912:	88fb      	ldrh	r3, [r7, #6]
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800591a:	2300      	movs	r3, #0
 800591c:	623b      	str	r3, [r7, #32]
 800591e:	e014      	b.n	800594a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	601a      	str	r2, [r3, #0]
    pDest++;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	3301      	adds	r3, #1
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	3301      	adds	r3, #1
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	3301      	adds	r3, #1
 800593c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	3301      	adds	r3, #1
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005944:	6a3b      	ldr	r3, [r7, #32]
 8005946:	3301      	adds	r3, #1
 8005948:	623b      	str	r3, [r7, #32]
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	429a      	cmp	r2, r3
 8005950:	d3e6      	bcc.n	8005920 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005952:	8bfb      	ldrh	r3, [r7, #30]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01e      	beq.n	8005996 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005962:	461a      	mov	r2, r3
 8005964:	f107 0310 	add.w	r3, r7, #16
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	fa22 f303 	lsr.w	r3, r2, r3
 8005978:	b2da      	uxtb	r2, r3
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	701a      	strb	r2, [r3, #0]
      i++;
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	3301      	adds	r3, #1
 8005982:	623b      	str	r3, [r7, #32]
      pDest++;
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	3301      	adds	r3, #1
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800598a:	8bfb      	ldrh	r3, [r7, #30]
 800598c:	3b01      	subs	r3, #1
 800598e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005990:	8bfb      	ldrh	r3, [r7, #30]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ea      	bne.n	800596c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005998:	4618      	mov	r0, r3
 800599a:	372c      	adds	r7, #44	; 0x2c
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d12c      	bne.n	8005a1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	db12      	blt.n	80059f8 <USB_EPSetStall+0x54>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00f      	beq.n	80059f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	0151      	lsls	r1, r2, #5
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	440a      	add	r2, r1
 80059ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	0151      	lsls	r1, r2, #5
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e02b      	b.n	8005a72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	db12      	blt.n	8005a52 <USB_EPSetStall+0xae>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00f      	beq.n	8005a52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	015a      	lsls	r2, r3, #5
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4413      	add	r3, r2
 8005a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	0151      	lsls	r1, r2, #5
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	440a      	add	r2, r1
 8005a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	785b      	ldrb	r3, [r3, #1]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d128      	bne.n	8005aee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	0151      	lsls	r1, r2, #5
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	791b      	ldrb	r3, [r3, #4]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d003      	beq.n	8005acc <USB_EPClearStall+0x4c>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	791b      	ldrb	r3, [r3, #4]
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d138      	bne.n	8005b3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	e027      	b.n	8005b3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	0151      	lsls	r1, r2, #5
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	440a      	add	r2, r1
 8005b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	791b      	ldrb	r3, [r3, #4]
 8005b12:	2b03      	cmp	r3, #3
 8005b14:	d003      	beq.n	8005b1e <USB_EPClearStall+0x9e>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	791b      	ldrb	r3, [r3, #4]
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d10f      	bne.n	8005b3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	0151      	lsls	r1, r2, #5
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	440a      	add	r2, r1
 8005b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005b6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005b80:	68f9      	ldr	r1, [r7, #12]
 8005b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bb2:	f023 0303 	bic.w	r3, r3, #3
 8005bb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc6:	f023 0302 	bic.w	r3, r3, #2
 8005bca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005bf4:	f023 0303 	bic.w	r3, r3, #3
 8005bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c08:	f043 0302 	orr.w	r3, r3, #2
 8005c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	695b      	ldr	r3, [r3, #20]
 8005c28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	4013      	ands	r3, r2
 8005c64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	0c1b      	lsrs	r3, r3, #16
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b085      	sub	sp, #20
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	4013      	ands	r3, r2
 8005c98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	b29b      	uxth	r3, r3
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b085      	sub	sp, #20
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b087      	sub	sp, #28
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005d0a:	78fb      	ldrb	r3, [r7, #3]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	fa22 f303 	lsr.w	r3, r2, r3
 8005d16:	01db      	lsls	r3, r3, #7
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005d20:	78fb      	ldrb	r3, [r7, #3]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4013      	ands	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d34:	68bb      	ldr	r3, [r7, #8]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4b09      	ldr	r3, [pc, #36]	; (8005da4 <USB_ActivateSetup+0x44>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d96:	2300      	movs	r3, #0
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3714      	adds	r7, #20
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	fffff800 	.word	0xfffff800

08005da8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	460b      	mov	r3, r1
 8005db2:	607a      	str	r2, [r7, #4]
 8005db4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	333c      	adds	r3, #60	; 0x3c
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4a26      	ldr	r2, [pc, #152]	; (8005e60 <USB_EP0_OutStart+0xb8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d90a      	bls.n	8005de2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ddc:	d101      	bne.n	8005de2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	e037      	b.n	8005e52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de8:	461a      	mov	r2, r3
 8005dea:	2300      	movs	r3, #0
 8005dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e10:	f043 0318 	orr.w	r3, r3, #24
 8005e14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005e28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d10f      	bne.n	8005e50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005e4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	371c      	adds	r7, #28
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	4f54300a 	.word	0x4f54300a

08005e64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b085      	sub	sp, #20
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3301      	adds	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	4a13      	ldr	r2, [pc, #76]	; (8005ec8 <USB_CoreReset+0x64>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d901      	bls.n	8005e82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e01b      	b.n	8005eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	daf2      	bge.n	8005e70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	f043 0201 	orr.w	r2, r3, #1
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a09      	ldr	r2, [pc, #36]	; (8005ec8 <USB_CoreReset+0x64>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d901      	bls.n	8005eac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e006      	b.n	8005eba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d0f0      	beq.n	8005e9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	00030d40 	.word	0x00030d40

08005ecc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ed8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005edc:	f002 fdac 	bl	8008a38 <malloc>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	32b0      	adds	r2, #176	; 0xb0
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005efa:	2302      	movs	r3, #2
 8005efc:	e0d4      	b.n	80060a8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005efe:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005f02:	2100      	movs	r1, #0
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f002 fdc5 	bl	8008a94 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	32b0      	adds	r2, #176	; 0xb0
 8005f14:	68f9      	ldr	r1, [r7, #12]
 8005f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	32b0      	adds	r2, #176	; 0xb0
 8005f24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	7c1b      	ldrb	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d138      	bne.n	8005fa8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f36:	4b5e      	ldr	r3, [pc, #376]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005f38:	7819      	ldrb	r1, [r3, #0]
 8005f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f3e:	2202      	movs	r2, #2
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f002 fbac 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f46:	4b5a      	ldr	r3, [pc, #360]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f003 020f 	and.w	r2, r3, #15
 8005f4e:	6879      	ldr	r1, [r7, #4]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	3324      	adds	r3, #36	; 0x24
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f60:	4b54      	ldr	r3, [pc, #336]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005f62:	7819      	ldrb	r1, [r3, #0]
 8005f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f68:	2202      	movs	r2, #2
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f002 fb97 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f70:	4b50      	ldr	r3, [pc, #320]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f003 020f 	and.w	r2, r3, #15
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4413      	add	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	440b      	add	r3, r1
 8005f84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f88:	2201      	movs	r2, #1
 8005f8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f8c:	4b4a      	ldr	r3, [pc, #296]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	f003 020f 	and.w	r2, r3, #15
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	440b      	add	r3, r1
 8005fa0:	3326      	adds	r3, #38	; 0x26
 8005fa2:	2210      	movs	r2, #16
 8005fa4:	801a      	strh	r2, [r3, #0]
 8005fa6:	e035      	b.n	8006014 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fa8:	4b41      	ldr	r3, [pc, #260]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005faa:	7819      	ldrb	r1, [r3, #0]
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	2202      	movs	r2, #2
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f002 fb74 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	; (80060b0 <USBD_CDC_Init+0x1e4>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	6879      	ldr	r1, [r7, #4]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	3324      	adds	r3, #36	; 0x24
 8005fcc:	2201      	movs	r2, #1
 8005fce:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005fd0:	4b38      	ldr	r3, [pc, #224]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005fd2:	7819      	ldrb	r1, [r3, #0]
 8005fd4:	2340      	movs	r3, #64	; 0x40
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f002 fb60 	bl	800869e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005fde:	4b35      	ldr	r3, [pc, #212]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	f003 020f 	and.w	r2, r3, #15
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ffa:	4b2f      	ldr	r3, [pc, #188]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	3326      	adds	r3, #38	; 0x26
 8006010:	2210      	movs	r2, #16
 8006012:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006014:	4b28      	ldr	r3, [pc, #160]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8006016:	7819      	ldrb	r1, [r3, #0]
 8006018:	2308      	movs	r3, #8
 800601a:	2203      	movs	r2, #3
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f002 fb3e 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006022:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <USBD_CDC_Init+0x1ec>)
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f003 020f 	and.w	r2, r3, #15
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	3324      	adds	r3, #36	; 0x24
 8006038:	2201      	movs	r2, #1
 800603a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	33b0      	adds	r3, #176	; 0xb0
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8006072:	2302      	movs	r3, #2
 8006074:	e018      	b.n	80060a8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7c1b      	ldrb	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800607e:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8006080:	7819      	ldrb	r1, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f002 fbf5 	bl	800887c <USBD_LL_PrepareReceive>
 8006092:	e008      	b.n	80060a6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006094:	4b07      	ldr	r3, [pc, #28]	; (80060b4 <USBD_CDC_Init+0x1e8>)
 8006096:	7819      	ldrb	r1, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800609e:	2340      	movs	r3, #64	; 0x40
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f002 fbeb 	bl	800887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000093 	.word	0x20000093
 80060b4:	20000094 	.word	0x20000094
 80060b8:	20000095 	.word	0x20000095

080060bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80060c8:	4b3a      	ldr	r3, [pc, #232]	; (80061b4 <USBD_CDC_DeInit+0xf8>)
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	4619      	mov	r1, r3
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f002 fb0b 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80060d4:	4b37      	ldr	r3, [pc, #220]	; (80061b4 <USBD_CDC_DeInit+0xf8>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	f003 020f 	and.w	r2, r3, #15
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3324      	adds	r3, #36	; 0x24
 80060ea:	2200      	movs	r2, #0
 80060ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80060ee:	4b32      	ldr	r3, [pc, #200]	; (80061b8 <USBD_CDC_DeInit+0xfc>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f002 faf8 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80060fa:	4b2f      	ldr	r3, [pc, #188]	; (80061b8 <USBD_CDC_DeInit+0xfc>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	f003 020f 	and.w	r2, r3, #15
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006112:	2200      	movs	r2, #0
 8006114:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006116:	4b29      	ldr	r3, [pc, #164]	; (80061bc <USBD_CDC_DeInit+0x100>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	4619      	mov	r1, r3
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f002 fae4 	bl	80086ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006122:	4b26      	ldr	r3, [pc, #152]	; (80061bc <USBD_CDC_DeInit+0x100>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	f003 020f 	and.w	r2, r3, #15
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	3324      	adds	r3, #36	; 0x24
 8006138:	2200      	movs	r2, #0
 800613a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800613c:	4b1f      	ldr	r3, [pc, #124]	; (80061bc <USBD_CDC_DeInit+0x100>)
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	f003 020f 	and.w	r2, r3, #15
 8006144:	6879      	ldr	r1, [r7, #4]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	440b      	add	r3, r1
 8006150:	3326      	adds	r3, #38	; 0x26
 8006152:	2200      	movs	r2, #0
 8006154:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	32b0      	adds	r2, #176	; 0xb0
 8006160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d01f      	beq.n	80061a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	33b0      	adds	r3, #176	; 0xb0
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	32b0      	adds	r2, #176	; 0xb0
 8006186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618a:	4618      	mov	r0, r3
 800618c:	f002 fc5c 	bl	8008a48 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	32b0      	adds	r2, #176	; 0xb0
 800619a:	2100      	movs	r1, #0
 800619c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20000093 	.word	0x20000093
 80061b8:	20000094 	.word	0x20000094
 80061bc:	20000095 	.word	0x20000095

080061c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	32b0      	adds	r2, #176	; 0xb0
 80061d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e0bf      	b.n	8006370 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d050      	beq.n	800629e <USBD_CDC_Setup+0xde>
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	f040 80af 	bne.w	8006360 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d03a      	beq.n	8006280 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	b25b      	sxtb	r3, r3
 8006210:	2b00      	cmp	r3, #0
 8006212:	da1b      	bge.n	800624c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	33b0      	adds	r3, #176	; 0xb0
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800622a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	88d2      	ldrh	r2, [r2, #6]
 8006230:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	88db      	ldrh	r3, [r3, #6]
 8006236:	2b07      	cmp	r3, #7
 8006238:	bf28      	it	cs
 800623a:	2307      	movcs	r3, #7
 800623c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	89fa      	ldrh	r2, [r7, #14]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f001 fdad 	bl	8007da4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800624a:	e090      	b.n	800636e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	785a      	ldrb	r2, [r3, #1]
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	88db      	ldrh	r3, [r3, #6]
 800625a:	2b3f      	cmp	r3, #63	; 0x3f
 800625c:	d803      	bhi.n	8006266 <USBD_CDC_Setup+0xa6>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	88db      	ldrh	r3, [r3, #6]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	e000      	b.n	8006268 <USBD_CDC_Setup+0xa8>
 8006266:	2240      	movs	r2, #64	; 0x40
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006276:	461a      	mov	r2, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fdbf 	bl	8007dfc <USBD_CtlPrepareRx>
      break;
 800627e:	e076      	b.n	800636e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	33b0      	adds	r3, #176	; 0xb0
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	4413      	add	r3, r2
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	7850      	ldrb	r0, [r2, #1]
 8006296:	2200      	movs	r2, #0
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	4798      	blx	r3
      break;
 800629c:	e067      	b.n	800636e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	785b      	ldrb	r3, [r3, #1]
 80062a2:	2b0b      	cmp	r3, #11
 80062a4:	d851      	bhi.n	800634a <USBD_CDC_Setup+0x18a>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <USBD_CDC_Setup+0xec>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	08006359 	.word	0x08006359
 80062b4:	0800634b 	.word	0x0800634b
 80062b8:	0800634b 	.word	0x0800634b
 80062bc:	0800634b 	.word	0x0800634b
 80062c0:	0800634b 	.word	0x0800634b
 80062c4:	0800634b 	.word	0x0800634b
 80062c8:	0800634b 	.word	0x0800634b
 80062cc:	0800634b 	.word	0x0800634b
 80062d0:	0800634b 	.word	0x0800634b
 80062d4:	08006307 	.word	0x08006307
 80062d8:	08006331 	.word	0x08006331
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d107      	bne.n	80062f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062e8:	f107 030a 	add.w	r3, r7, #10
 80062ec:	2202      	movs	r2, #2
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f001 fd57 	bl	8007da4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062f6:	e032      	b.n	800635e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f001 fce1 	bl	8007cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006300:	2303      	movs	r3, #3
 8006302:	75fb      	strb	r3, [r7, #23]
          break;
 8006304:	e02b      	b.n	800635e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b03      	cmp	r3, #3
 8006310:	d107      	bne.n	8006322 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006312:	f107 030d 	add.w	r3, r7, #13
 8006316:	2201      	movs	r2, #1
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 fd42 	bl	8007da4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006320:	e01d      	b.n	800635e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 fccc 	bl	8007cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 800632a:	2303      	movs	r3, #3
 800632c:	75fb      	strb	r3, [r7, #23]
          break;
 800632e:	e016      	b.n	800635e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b03      	cmp	r3, #3
 800633a:	d00f      	beq.n	800635c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fcbf 	bl	8007cc2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006344:	2303      	movs	r3, #3
 8006346:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006348:	e008      	b.n	800635c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 fcb8 	bl	8007cc2 <USBD_CtlError>
          ret = USBD_FAIL;
 8006352:	2303      	movs	r3, #3
 8006354:	75fb      	strb	r3, [r7, #23]
          break;
 8006356:	e002      	b.n	800635e <USBD_CDC_Setup+0x19e>
          break;
 8006358:	bf00      	nop
 800635a:	e008      	b.n	800636e <USBD_CDC_Setup+0x1ae>
          break;
 800635c:	bf00      	nop
      }
      break;
 800635e:	e006      	b.n	800636e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006360:	6839      	ldr	r1, [r7, #0]
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f001 fcad 	bl	8007cc2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006368:	2303      	movs	r3, #3
 800636a:	75fb      	strb	r3, [r7, #23]
      break;
 800636c:	bf00      	nop
  }

  return (uint8_t)ret;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800638a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	32b0      	adds	r2, #176	; 0xb0
 8006396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800639e:	2303      	movs	r3, #3
 80063a0:	e065      	b.n	800646e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	32b0      	adds	r2, #176	; 0xb0
 80063ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80063b2:	78fb      	ldrb	r3, [r7, #3]
 80063b4:	f003 020f 	and.w	r2, r3, #15
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	3318      	adds	r3, #24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d02f      	beq.n	800642c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	f003 020f 	and.w	r2, r3, #15
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	3318      	adds	r3, #24
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	f003 010f 	and.w	r1, r3, #15
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	460b      	mov	r3, r1
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	440b      	add	r3, r1
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4403      	add	r3, r0
 80063f4:	3348      	adds	r3, #72	; 0x48
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80063fc:	fb01 f303 	mul.w	r3, r1, r3
 8006400:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006402:	2b00      	cmp	r3, #0
 8006404:	d112      	bne.n	800642c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	f003 020f 	and.w	r2, r3, #15
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	440b      	add	r3, r1
 8006418:	3318      	adds	r3, #24
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800641e:	78f9      	ldrb	r1, [r7, #3]
 8006420:	2300      	movs	r3, #0
 8006422:	2200      	movs	r2, #0
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f002 fa08 	bl	800883a <USBD_LL_Transmit>
 800642a:	e01f      	b.n	800646c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	33b0      	adds	r3, #176	; 0xb0
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d010      	beq.n	800646c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	33b0      	adds	r3, #176	; 0xb0
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006468:	78fa      	ldrb	r2, [r7, #3]
 800646a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	460b      	mov	r3, r1
 8006480:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	32b0      	adds	r2, #176	; 0xb0
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	32b0      	adds	r2, #176	; 0xb0
 800649c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e01a      	b.n	80064de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f002 fa06 	bl	80088be <USBD_LL_GetRxDataSize>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	33b0      	adds	r3, #176	; 0xb0
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	68fa      	ldr	r2, [r7, #12]
 80064ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064d8:	4611      	mov	r1, r2
 80064da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80064dc:	2300      	movs	r3, #0
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}

080064e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064e6:	b580      	push	{r7, lr}
 80064e8:	b084      	sub	sp, #16
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	32b0      	adds	r2, #176	; 0xb0
 80064f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e025      	b.n	8006554 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	33b0      	adds	r3, #176	; 0xb0
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d01a      	beq.n	8006552 <USBD_CDC_EP0_RxReady+0x6c>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006522:	2bff      	cmp	r3, #255	; 0xff
 8006524:	d015      	beq.n	8006552 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	33b0      	adds	r3, #176	; 0xb0
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800653e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006546:	b292      	uxth	r2, r2
 8006548:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006564:	2182      	movs	r1, #130	; 0x82
 8006566:	4818      	ldr	r0, [pc, #96]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006568:	f000 fd49 	bl	8006ffe <USBD_GetEpDesc>
 800656c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800656e:	2101      	movs	r1, #1
 8006570:	4815      	ldr	r0, [pc, #84]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006572:	f000 fd44 	bl	8006ffe <USBD_GetEpDesc>
 8006576:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006578:	2181      	movs	r1, #129	; 0x81
 800657a:	4813      	ldr	r0, [pc, #76]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800657c:	f000 fd3f 	bl	8006ffe <USBD_GetEpDesc>
 8006580:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2210      	movs	r2, #16
 800658c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d006      	beq.n	80065a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2200      	movs	r2, #0
 8006598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800659c:	711a      	strb	r2, [r3, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d006      	beq.n	80065b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065b0:	711a      	strb	r2, [r3, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2243      	movs	r2, #67	; 0x43
 80065ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065bc:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000050 	.word	0x20000050

080065cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065d4:	2182      	movs	r1, #130	; 0x82
 80065d6:	4818      	ldr	r0, [pc, #96]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065d8:	f000 fd11 	bl	8006ffe <USBD_GetEpDesc>
 80065dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065de:	2101      	movs	r1, #1
 80065e0:	4815      	ldr	r0, [pc, #84]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065e2:	f000 fd0c 	bl	8006ffe <USBD_GetEpDesc>
 80065e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065e8:	2181      	movs	r1, #129	; 0x81
 80065ea:	4813      	ldr	r0, [pc, #76]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80065ec:	f000 fd07 	bl	8006ffe <USBD_GetEpDesc>
 80065f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2210      	movs	r2, #16
 80065fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d006      	beq.n	8006612 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	2200      	movs	r2, #0
 8006608:	711a      	strb	r2, [r3, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	f042 0202 	orr.w	r2, r2, #2
 8006610:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	711a      	strb	r2, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f042 0202 	orr.w	r2, r2, #2
 8006624:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2243      	movs	r2, #67	; 0x43
 800662a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000050 	.word	0x20000050

0800663c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006644:	2182      	movs	r1, #130	; 0x82
 8006646:	4818      	ldr	r0, [pc, #96]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006648:	f000 fcd9 	bl	8006ffe <USBD_GetEpDesc>
 800664c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800664e:	2101      	movs	r1, #1
 8006650:	4815      	ldr	r0, [pc, #84]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006652:	f000 fcd4 	bl	8006ffe <USBD_GetEpDesc>
 8006656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006658:	2181      	movs	r1, #129	; 0x81
 800665a:	4813      	ldr	r0, [pc, #76]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800665c:	f000 fccf 	bl	8006ffe <USBD_GetEpDesc>
 8006660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d002      	beq.n	800666e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2210      	movs	r2, #16
 800666c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d006      	beq.n	8006682 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2200      	movs	r2, #0
 8006678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800667c:	711a      	strb	r2, [r3, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d006      	beq.n	8006696 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006690:	711a      	strb	r2, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2243      	movs	r2, #67	; 0x43
 800669a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800669c:	4b02      	ldr	r3, [pc, #8]	; (80066a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20000050 	.word	0x20000050

080066ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	220a      	movs	r2, #10
 80066b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80066ba:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	2000000c 	.word	0x2000000c

080066cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	e009      	b.n	80066f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	33b0      	adds	r3, #176	; 0xb0
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	32b0      	adds	r2, #176	; 0xb0
 8006716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800671a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006722:	2303      	movs	r3, #3
 8006724:	e008      	b.n	8006738 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	32b0      	adds	r2, #176	; 0xb0
 8006758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006764:	2303      	movs	r3, #3
 8006766:	e004      	b.n	8006772 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	32b0      	adds	r2, #176	; 0xb0
 8006792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006796:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006798:	2301      	movs	r3, #1
 800679a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e025      	b.n	80067f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d11f      	bne.n	80067f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80067b8:	4b10      	ldr	r3, [pc, #64]	; (80067fc <USBD_CDC_TransmitPacket+0x7c>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f003 020f 	and.w	r2, r3, #15
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4403      	add	r3, r0
 80067d2:	3318      	adds	r3, #24
 80067d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80067d6:	4b09      	ldr	r3, [pc, #36]	; (80067fc <USBD_CDC_TransmitPacket+0x7c>)
 80067d8:	7819      	ldrb	r1, [r3, #0]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f002 f827 	bl	800883a <USBD_LL_Transmit>

    ret = USBD_OK;
 80067ec:	2300      	movs	r3, #0
 80067ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000093 	.word	0x20000093

08006800 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	32b0      	adds	r2, #176	; 0xb0
 8006812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006816:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	32b0      	adds	r2, #176	; 0xb0
 8006822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800682a:	2303      	movs	r3, #3
 800682c:	e018      	b.n	8006860 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	7c1b      	ldrb	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10a      	bne.n	800684c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <USBD_CDC_ReceivePacket+0x68>)
 8006838:	7819      	ldrb	r1, [r3, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f002 f819 	bl	800887c <USBD_LL_PrepareReceive>
 800684a:	e008      	b.n	800685e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800684c:	4b06      	ldr	r3, [pc, #24]	; (8006868 <USBD_CDC_ReceivePacket+0x68>)
 800684e:	7819      	ldrb	r1, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006856:	2340      	movs	r3, #64	; 0x40
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f002 f80f 	bl	800887c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000094 	.word	0x20000094

0800686c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d101      	bne.n	8006884 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	e01f      	b.n	80068c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	79fa      	ldrb	r2, [r7, #7]
 80068b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f001 fe89 	bl	80085d0 <USBD_LL_Init>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e025      	b.n	8006930 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	32ae      	adds	r2, #174	; 0xae
 80068f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00f      	beq.n	8006920 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	; 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006910:	f107 020e 	add.w	r2, r7, #14
 8006914:	4610      	mov	r0, r2
 8006916:	4798      	blx	r3
 8006918:	4602      	mov	r2, r0
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f001 fe91 	bl	8008668 <USBD_LL_Start>
 8006946:	4603      	mov	r3, r0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b084      	sub	sp, #16
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697c:	2b00      	cmp	r3, #0
 800697e:	d009      	beq.n	8006994 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	4611      	mov	r1, r2
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	4798      	blx	r3
 8006990:	4603      	mov	r3, r0
 8006992:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006994:	7bfb      	ldrb	r3, [r7, #15]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	460b      	mov	r3, r1
 80069a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	78fa      	ldrb	r2, [r7, #3]
 80069b8:	4611      	mov	r1, r2
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f001 f932 	bl	8007c4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069f8:	461a      	mov	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a06:	f003 031f 	and.w	r3, r3, #31
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d01a      	beq.n	8006a44 <USBD_LL_SetupStage+0x72>
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d822      	bhi.n	8006a58 <USBD_LL_SetupStage+0x86>
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d002      	beq.n	8006a1c <USBD_LL_SetupStage+0x4a>
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d00a      	beq.n	8006a30 <USBD_LL_SetupStage+0x5e>
 8006a1a:	e01d      	b.n	8006a58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb5f 	bl	80070e8 <USBD_StdDevReq>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a2e:	e020      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fbc7 	bl	80071cc <USBD_StdItfReq>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	73fb      	strb	r3, [r7, #15]
      break;
 8006a42:	e016      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fc29 	bl	80072a4 <USBD_StdEPReq>
 8006a52:	4603      	mov	r3, r0
 8006a54:	73fb      	strb	r3, [r7, #15]
      break;
 8006a56:	e00c      	b.n	8006a72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f001 fe5e 	bl	8008728 <USBD_LL_StallEP>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	bf00      	nop
  }

  return ret;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b086      	sub	sp, #24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	460b      	mov	r3, r1
 8006a86:	607a      	str	r2, [r7, #4]
 8006a88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006a8e:	7afb      	ldrb	r3, [r7, #11]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d16e      	bne.n	8006b72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006aa2:	2b03      	cmp	r3, #3
 8006aa4:	f040 8098 	bne.w	8006bd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d913      	bls.n	8006adc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	1ad2      	subs	r2, r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bf28      	it	cs
 8006ace:	4613      	movcs	r3, r2
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6879      	ldr	r1, [r7, #4]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 f9ae 	bl	8007e36 <USBD_CtlContinueRx>
 8006ada:	e07d      	b.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d014      	beq.n	8006b14 <USBD_LL_DataOutStage+0x98>
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d81d      	bhi.n	8006b2a <USBD_LL_DataOutStage+0xae>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <USBD_LL_DataOutStage+0x7c>
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d003      	beq.n	8006afe <USBD_LL_DataOutStage+0x82>
 8006af6:	e018      	b.n	8006b2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	75bb      	strb	r3, [r7, #22]
            break;
 8006afc:	e018      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	4619      	mov	r1, r3
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 fa5e 	bl	8006fca <USBD_CoreFindIF>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	75bb      	strb	r3, [r7, #22]
            break;
 8006b12:	e00d      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fa60 	bl	8006fe4 <USBD_CoreFindEP>
 8006b24:	4603      	mov	r3, r0
 8006b26:	75bb      	strb	r3, [r7, #22]
            break;
 8006b28:	e002      	b.n	8006b30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	75bb      	strb	r3, [r7, #22]
            break;
 8006b2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006b30:	7dbb      	ldrb	r3, [r7, #22]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d119      	bne.n	8006b6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d113      	bne.n	8006b6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006b42:	7dba      	ldrb	r2, [r7, #22]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	32ae      	adds	r2, #174	; 0xae
 8006b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006b52:	7dba      	ldrb	r2, [r7, #22]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006b5a:	7dba      	ldrb	r2, [r7, #22]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	32ae      	adds	r2, #174	; 0xae
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f001 f974 	bl	8007e58 <USBD_CtlSendStatus>
 8006b70:	e032      	b.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006b72:	7afb      	ldrb	r3, [r7, #11]
 8006b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 fa31 	bl	8006fe4 <USBD_CoreFindEP>
 8006b82:	4603      	mov	r3, r0
 8006b84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b86:	7dbb      	ldrb	r3, [r7, #22]
 8006b88:	2bff      	cmp	r3, #255	; 0xff
 8006b8a:	d025      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
 8006b8c:	7dbb      	ldrb	r3, [r7, #22]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d122      	bne.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d117      	bne.n	8006bce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006b9e:	7dba      	ldrb	r2, [r7, #22]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	32ae      	adds	r2, #174	; 0xae
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00f      	beq.n	8006bce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006bae:	7dba      	ldrb	r2, [r7, #22]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006bb6:	7dba      	ldrb	r2, [r7, #22]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	32ae      	adds	r2, #174	; 0xae
 8006bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	7afa      	ldrb	r2, [r7, #11]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	4798      	blx	r3
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
 8006bd6:	e000      	b.n	8006bda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b086      	sub	sp, #24
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	460b      	mov	r3, r1
 8006bec:	607a      	str	r2, [r7, #4]
 8006bee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006bf0:	7afb      	ldrb	r3, [r7, #11]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d16f      	bne.n	8006cd6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d15a      	bne.n	8006cbc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d914      	bls.n	8006c3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	1ad2      	subs	r2, r2, r3
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f001 f8d6 	bl	8007dda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2200      	movs	r2, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f001 fe21 	bl	800887c <USBD_LL_PrepareReceive>
 8006c3a:	e03f      	b.n	8006cbc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d11c      	bne.n	8006c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d316      	bcc.n	8006c82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d20f      	bcs.n	8006c82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c62:	2200      	movs	r2, #0
 8006c64:	2100      	movs	r1, #0
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f001 f8b7 	bl	8007dda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c74:	2300      	movs	r3, #0
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f001 fdfe 	bl	800887c <USBD_LL_PrepareReceive>
 8006c80:	e01c      	b.n	8006cbc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d10f      	bne.n	8006cae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d009      	beq.n	8006cae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f001 fd39 	bl	8008728 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f001 f8e1 	bl	8007e7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d03a      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff fe42 	bl	8006950 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cd4:	e032      	b.n	8006d3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f97f 	bl	8006fe4 <USBD_CoreFindEP>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
 8006cec:	2bff      	cmp	r3, #255	; 0xff
 8006cee:	d025      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d122      	bne.n	8006d3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d11c      	bne.n	8006d3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006d02:	7dfa      	ldrb	r2, [r7, #23]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	32ae      	adds	r2, #174	; 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d014      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006d12:	7dfa      	ldrb	r2, [r7, #23]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006d1a:	7dfa      	ldrb	r2, [r7, #23]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	32ae      	adds	r2, #174	; 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	7afa      	ldrb	r2, [r7, #11]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006d32:	7dbb      	ldrb	r3, [r7, #22]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006d38:	7dbb      	ldrb	r3, [r7, #22]
 8006d3a:	e000      	b.n	8006d3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2201      	movs	r2, #1
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d014      	beq.n	8006dac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00e      	beq.n	8006dac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	6852      	ldr	r2, [r2, #4]
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006da8:	2303      	movs	r3, #3
 8006daa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dac:	2340      	movs	r3, #64	; 0x40
 8006dae:	2200      	movs	r2, #0
 8006db0:	2100      	movs	r1, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 fc73 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2240      	movs	r2, #64	; 0x40
 8006dc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dc8:	2340      	movs	r3, #64	; 0x40
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2180      	movs	r1, #128	; 0x80
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 fc65 	bl	800869e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2240      	movs	r2, #64	; 0x40
 8006dde:	621a      	str	r2, [r3, #32]

  return ret;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	460b      	mov	r3, r1
 8006df4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b083      	sub	sp, #12
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2204      	movs	r2, #4
 8006e24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e36:	b480      	push	{r7}
 8006e38:	b083      	sub	sp, #12
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d106      	bne.n	8006e58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006e50:	b2da      	uxtb	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	370c      	adds	r7, #12
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr

08006e66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d110      	bne.n	8006e9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00b      	beq.n	8006e9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d005      	beq.n	8006e9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	32ae      	adds	r2, #174	; 0xae
 8006ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e01c      	b.n	8006f02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	2b03      	cmp	r3, #3
 8006ed2:	d115      	bne.n	8006f00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	32ae      	adds	r2, #174	; 0xae
 8006ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	32ae      	adds	r2, #174	; 0xae
 8006ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	4611      	mov	r1, r2
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b082      	sub	sp, #8
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	32ae      	adds	r2, #174	; 0xae
 8006f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e01c      	b.n	8006f66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d115      	bne.n	8006f64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	32ae      	adds	r2, #174	; 0xae
 8006f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32ae      	adds	r2, #174	; 0xae
 8006f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006f6e:	b480      	push	{r7}
 8006f70:	b083      	sub	sp, #12
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00e      	beq.n	8006fc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	6852      	ldr	r2, [r2, #4]
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	4798      	blx	r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006fd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	460b      	mov	r3, r1
 8006fee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ff0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b086      	sub	sp, #24
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	460b      	mov	r3, r1
 8007008:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	885b      	ldrh	r3, [r3, #2]
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	429a      	cmp	r2, r3
 8007024:	d920      	bls.n	8007068 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	b29b      	uxth	r3, r3
 800702c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800702e:	e013      	b.n	8007058 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007030:	f107 030a 	add.w	r3, r7, #10
 8007034:	4619      	mov	r1, r3
 8007036:	6978      	ldr	r0, [r7, #20]
 8007038:	f000 f81b 	bl	8007072 <USBD_GetNextDesc>
 800703c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	785b      	ldrb	r3, [r3, #1]
 8007042:	2b05      	cmp	r3, #5
 8007044:	d108      	bne.n	8007058 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	789b      	ldrb	r3, [r3, #2]
 800704e:	78fa      	ldrb	r2, [r7, #3]
 8007050:	429a      	cmp	r2, r3
 8007052:	d008      	beq.n	8007066 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	885b      	ldrh	r3, [r3, #2]
 800705c:	b29a      	uxth	r2, r3
 800705e:	897b      	ldrh	r3, [r7, #10]
 8007060:	429a      	cmp	r2, r3
 8007062:	d8e5      	bhi.n	8007030 <USBD_GetEpDesc+0x32>
 8007064:	e000      	b.n	8007068 <USBD_GetEpDesc+0x6a>
          break;
 8007066:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007068:	693b      	ldr	r3, [r7, #16]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3718      	adds	r7, #24
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	881a      	ldrh	r2, [r3, #0]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b29b      	uxth	r3, r3
 800708a:	4413      	add	r3, r2
 800708c:	b29a      	uxth	r2, r3
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	461a      	mov	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800709e:	68fb      	ldr	r3, [r7, #12]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b087      	sub	sp, #28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	3301      	adds	r3, #1
 80070c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80070ca:	8a3b      	ldrh	r3, [r7, #16]
 80070cc:	021b      	lsls	r3, r3, #8
 80070ce:	b21a      	sxth	r2, r3
 80070d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	b21b      	sxth	r3, r3
 80070d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80070da:	89fb      	ldrh	r3, [r7, #14]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070fe:	2b40      	cmp	r3, #64	; 0x40
 8007100:	d005      	beq.n	800710e <USBD_StdDevReq+0x26>
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d857      	bhi.n	80071b6 <USBD_StdDevReq+0xce>
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00f      	beq.n	800712a <USBD_StdDevReq+0x42>
 800710a:	2b20      	cmp	r3, #32
 800710c:	d153      	bne.n	80071b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	32ae      	adds	r2, #174	; 0xae
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3
 8007124:	4603      	mov	r3, r0
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e04a      	b.n	80071c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	785b      	ldrb	r3, [r3, #1]
 800712e:	2b09      	cmp	r3, #9
 8007130:	d83b      	bhi.n	80071aa <USBD_StdDevReq+0xc2>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <USBD_StdDevReq+0x50>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	0800718d 	.word	0x0800718d
 800713c:	080071a1 	.word	0x080071a1
 8007140:	080071ab 	.word	0x080071ab
 8007144:	08007197 	.word	0x08007197
 8007148:	080071ab 	.word	0x080071ab
 800714c:	0800716b 	.word	0x0800716b
 8007150:	08007161 	.word	0x08007161
 8007154:	080071ab 	.word	0x080071ab
 8007158:	08007183 	.word	0x08007183
 800715c:	08007175 	.word	0x08007175
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa3c 	bl	80075e0 <USBD_GetDescriptor>
          break;
 8007168:	e024      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fbcb 	bl	8007908 <USBD_SetAddress>
          break;
 8007172:	e01f      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fc0a 	bl	8007990 <USBD_SetConfig>
 800717c:	4603      	mov	r3, r0
 800717e:	73fb      	strb	r3, [r7, #15]
          break;
 8007180:	e018      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007182:	6839      	ldr	r1, [r7, #0]
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 fcad 	bl	8007ae4 <USBD_GetConfig>
          break;
 800718a:	e013      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 fcde 	bl	8007b50 <USBD_GetStatus>
          break;
 8007194:	e00e      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007196:	6839      	ldr	r1, [r7, #0]
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 fd0d 	bl	8007bb8 <USBD_SetFeature>
          break;
 800719e:	e009      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fd31 	bl	8007c0a <USBD_ClrFeature>
          break;
 80071a8:	e004      	b.n	80071b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fd88 	bl	8007cc2 <USBD_CtlError>
          break;
 80071b2:	bf00      	nop
      }
      break;
 80071b4:	e004      	b.n	80071c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fd82 	bl	8007cc2 <USBD_CtlError>
      break;
 80071be:	bf00      	nop
  }

  return ret;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d005      	beq.n	80071f2 <USBD_StdItfReq+0x26>
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	d852      	bhi.n	8007290 <USBD_StdItfReq+0xc4>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <USBD_StdItfReq+0x26>
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d14e      	bne.n	8007290 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	3b01      	subs	r3, #1
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d840      	bhi.n	8007282 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	889b      	ldrh	r3, [r3, #4]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d836      	bhi.n	8007278 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	889b      	ldrh	r3, [r3, #4]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff fed9 	bl	8006fca <USBD_CoreFindIF>
 8007218:	4603      	mov	r3, r0
 800721a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	2bff      	cmp	r3, #255	; 0xff
 8007220:	d01d      	beq.n	800725e <USBD_StdItfReq+0x92>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d11a      	bne.n	800725e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007228:	7bba      	ldrb	r2, [r7, #14]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	32ae      	adds	r2, #174	; 0xae
 800722e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00f      	beq.n	8007258 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007238:	7bba      	ldrb	r2, [r7, #14]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007240:	7bba      	ldrb	r2, [r7, #14]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32ae      	adds	r2, #174	; 0xae
 8007246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
 8007252:	4603      	mov	r3, r0
 8007254:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007256:	e004      	b.n	8007262 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007258:	2303      	movs	r3, #3
 800725a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800725c:	e001      	b.n	8007262 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800725e:	2303      	movs	r3, #3
 8007260:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88db      	ldrh	r3, [r3, #6]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d110      	bne.n	800728c <USBD_StdItfReq+0xc0>
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10d      	bne.n	800728c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fdf1 	bl	8007e58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007276:	e009      	b.n	800728c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 fd21 	bl	8007cc2 <USBD_CtlError>
          break;
 8007280:	e004      	b.n	800728c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 fd1c 	bl	8007cc2 <USBD_CtlError>
          break;
 800728a:	e000      	b.n	800728e <USBD_StdItfReq+0xc2>
          break;
 800728c:	bf00      	nop
      }
      break;
 800728e:	e004      	b.n	800729a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fd15 	bl	8007cc2 <USBD_CtlError>
      break;
 8007298:	bf00      	nop
  }

  return ret;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	889b      	ldrh	r3, [r3, #4]
 80072b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072c0:	2b40      	cmp	r3, #64	; 0x40
 80072c2:	d007      	beq.n	80072d4 <USBD_StdEPReq+0x30>
 80072c4:	2b40      	cmp	r3, #64	; 0x40
 80072c6:	f200 817f 	bhi.w	80075c8 <USBD_StdEPReq+0x324>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d02a      	beq.n	8007324 <USBD_StdEPReq+0x80>
 80072ce:	2b20      	cmp	r3, #32
 80072d0:	f040 817a 	bne.w	80075c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f7ff fe83 	bl	8006fe4 <USBD_CoreFindEP>
 80072de:	4603      	mov	r3, r0
 80072e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e2:	7b7b      	ldrb	r3, [r7, #13]
 80072e4:	2bff      	cmp	r3, #255	; 0xff
 80072e6:	f000 8174 	beq.w	80075d2 <USBD_StdEPReq+0x32e>
 80072ea:	7b7b      	ldrb	r3, [r7, #13]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8170 	bne.w	80075d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80072f2:	7b7a      	ldrb	r2, [r7, #13]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80072fa:	7b7a      	ldrb	r2, [r7, #13]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	32ae      	adds	r2, #174	; 0xae
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8163 	beq.w	80075d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800730c:	7b7a      	ldrb	r2, [r7, #13]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32ae      	adds	r2, #174	; 0xae
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	4798      	blx	r3
 800731e:	4603      	mov	r3, r0
 8007320:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007322:	e156      	b.n	80075d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	785b      	ldrb	r3, [r3, #1]
 8007328:	2b03      	cmp	r3, #3
 800732a:	d008      	beq.n	800733e <USBD_StdEPReq+0x9a>
 800732c:	2b03      	cmp	r3, #3
 800732e:	f300 8145 	bgt.w	80075bc <USBD_StdEPReq+0x318>
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 809b 	beq.w	800746e <USBD_StdEPReq+0x1ca>
 8007338:	2b01      	cmp	r3, #1
 800733a:	d03c      	beq.n	80073b6 <USBD_StdEPReq+0x112>
 800733c:	e13e      	b.n	80075bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d002      	beq.n	8007350 <USBD_StdEPReq+0xac>
 800734a:	2b03      	cmp	r3, #3
 800734c:	d016      	beq.n	800737c <USBD_StdEPReq+0xd8>
 800734e:	e02c      	b.n	80073aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00d      	beq.n	8007372 <USBD_StdEPReq+0xce>
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b80      	cmp	r3, #128	; 0x80
 800735a:	d00a      	beq.n	8007372 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800735c:	7bbb      	ldrb	r3, [r7, #14]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 f9e1 	bl	8008728 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007366:	2180      	movs	r1, #128	; 0x80
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f001 f9dd 	bl	8008728 <USBD_LL_StallEP>
 800736e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007370:	e020      	b.n	80073b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fca4 	bl	8007cc2 <USBD_CtlError>
              break;
 800737a:	e01b      	b.n	80073b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	885b      	ldrh	r3, [r3, #2]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10e      	bne.n	80073a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00b      	beq.n	80073a2 <USBD_StdEPReq+0xfe>
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b80      	cmp	r3, #128	; 0x80
 800738e:	d008      	beq.n	80073a2 <USBD_StdEPReq+0xfe>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	88db      	ldrh	r3, [r3, #6]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007398:	7bbb      	ldrb	r3, [r7, #14]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 f9c3 	bl	8008728 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fd58 	bl	8007e58 <USBD_CtlSendStatus>

              break;
 80073a8:	e004      	b.n	80073b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fc88 	bl	8007cc2 <USBD_CtlError>
              break;
 80073b2:	bf00      	nop
          }
          break;
 80073b4:	e107      	b.n	80075c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d002      	beq.n	80073c8 <USBD_StdEPReq+0x124>
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d016      	beq.n	80073f4 <USBD_StdEPReq+0x150>
 80073c6:	e04b      	b.n	8007460 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00d      	beq.n	80073ea <USBD_StdEPReq+0x146>
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b80      	cmp	r3, #128	; 0x80
 80073d2:	d00a      	beq.n	80073ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 f9a5 	bl	8008728 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80073de:	2180      	movs	r1, #128	; 0x80
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f001 f9a1 	bl	8008728 <USBD_LL_StallEP>
 80073e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e8:	e040      	b.n	800746c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80073ea:	6839      	ldr	r1, [r7, #0]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fc68 	bl	8007cc2 <USBD_CtlError>
              break;
 80073f2:	e03b      	b.n	800746c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	885b      	ldrh	r3, [r3, #2]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d136      	bne.n	800746a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007402:	2b00      	cmp	r3, #0
 8007404:	d004      	beq.n	8007410 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007406:	7bbb      	ldrb	r3, [r7, #14]
 8007408:	4619      	mov	r1, r3
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 f9ab 	bl	8008766 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fd21 	bl	8007e58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007416:	7bbb      	ldrb	r3, [r7, #14]
 8007418:	4619      	mov	r1, r3
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff fde2 	bl	8006fe4 <USBD_CoreFindEP>
 8007420:	4603      	mov	r3, r0
 8007422:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007424:	7b7b      	ldrb	r3, [r7, #13]
 8007426:	2bff      	cmp	r3, #255	; 0xff
 8007428:	d01f      	beq.n	800746a <USBD_StdEPReq+0x1c6>
 800742a:	7b7b      	ldrb	r3, [r7, #13]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d11c      	bne.n	800746a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007430:	7b7a      	ldrb	r2, [r7, #13]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007438:	7b7a      	ldrb	r2, [r7, #13]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	32ae      	adds	r2, #174	; 0xae
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d010      	beq.n	800746a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007448:	7b7a      	ldrb	r2, [r7, #13]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	32ae      	adds	r2, #174	; 0xae
 800744e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	4798      	blx	r3
 800745a:	4603      	mov	r3, r0
 800745c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800745e:	e004      	b.n	800746a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fc2d 	bl	8007cc2 <USBD_CtlError>
              break;
 8007468:	e000      	b.n	800746c <USBD_StdEPReq+0x1c8>
              break;
 800746a:	bf00      	nop
          }
          break;
 800746c:	e0ab      	b.n	80075c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d002      	beq.n	8007480 <USBD_StdEPReq+0x1dc>
 800747a:	2b03      	cmp	r3, #3
 800747c:	d032      	beq.n	80074e4 <USBD_StdEPReq+0x240>
 800747e:	e097      	b.n	80075b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <USBD_StdEPReq+0x1f2>
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d004      	beq.n	8007496 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fc17 	bl	8007cc2 <USBD_CtlError>
                break;
 8007494:	e091      	b.n	80075ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007496:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800749a:	2b00      	cmp	r3, #0
 800749c:	da0b      	bge.n	80074b6 <USBD_StdEPReq+0x212>
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80074a4:	4613      	mov	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	3310      	adds	r3, #16
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	3304      	adds	r3, #4
 80074b4:	e00b      	b.n	80074ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074bc:	4613      	mov	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	4413      	add	r3, r2
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4413      	add	r3, r2
 80074cc:	3304      	adds	r3, #4
 80074ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2202      	movs	r2, #2
 80074da:	4619      	mov	r1, r3
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 fc61 	bl	8007da4 <USBD_CtlSendData>
              break;
 80074e2:	e06a      	b.n	80075ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80074e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da11      	bge.n	8007510 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	f003 020f 	and.w	r2, r3, #15
 80074f2:	6879      	ldr	r1, [r7, #4]
 80074f4:	4613      	mov	r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	440b      	add	r3, r1
 80074fe:	3324      	adds	r3, #36	; 0x24
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d117      	bne.n	8007536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fbda 	bl	8007cc2 <USBD_CtlError>
                  break;
 800750e:	e054      	b.n	80075ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	f003 020f 	and.w	r2, r3, #15
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fbc7 	bl	8007cc2 <USBD_CtlError>
                  break;
 8007534:	e041      	b.n	80075ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007536:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800753a:	2b00      	cmp	r3, #0
 800753c:	da0b      	bge.n	8007556 <USBD_StdEPReq+0x2b2>
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	3310      	adds	r3, #16
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	3304      	adds	r3, #4
 8007554:	e00b      	b.n	800756e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	3304      	adds	r3, #4
 800756e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007570:	7bbb      	ldrb	r3, [r7, #14]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <USBD_StdEPReq+0x2d8>
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b80      	cmp	r3, #128	; 0x80
 800757a:	d103      	bne.n	8007584 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e00e      	b.n	80075a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007584:	7bbb      	ldrb	r3, [r7, #14]
 8007586:	4619      	mov	r1, r3
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f001 f90b 	bl	80087a4 <USBD_LL_IsStallEP>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2201      	movs	r2, #1
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	e002      	b.n	80075a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	2202      	movs	r2, #2
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fbfb 	bl	8007da4 <USBD_CtlSendData>
              break;
 80075ae:	e004      	b.n	80075ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb85 	bl	8007cc2 <USBD_CtlError>
              break;
 80075b8:	bf00      	nop
          }
          break;
 80075ba:	e004      	b.n	80075c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fb7f 	bl	8007cc2 <USBD_CtlError>
          break;
 80075c4:	bf00      	nop
      }
      break;
 80075c6:	e005      	b.n	80075d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb79 	bl	8007cc2 <USBD_CtlError>
      break;
 80075d0:	e000      	b.n	80075d4 <USBD_StdEPReq+0x330>
      break;
 80075d2:	bf00      	nop
  }

  return ret;
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
	...

080075e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	885b      	ldrh	r3, [r3, #2]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3b01      	subs	r3, #1
 8007600:	2b0e      	cmp	r3, #14
 8007602:	f200 8152 	bhi.w	80078aa <USBD_GetDescriptor+0x2ca>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <USBD_GetDescriptor+0x2c>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	0800767d 	.word	0x0800767d
 8007610:	08007695 	.word	0x08007695
 8007614:	080076d5 	.word	0x080076d5
 8007618:	080078ab 	.word	0x080078ab
 800761c:	080078ab 	.word	0x080078ab
 8007620:	0800784b 	.word	0x0800784b
 8007624:	08007877 	.word	0x08007877
 8007628:	080078ab 	.word	0x080078ab
 800762c:	080078ab 	.word	0x080078ab
 8007630:	080078ab 	.word	0x080078ab
 8007634:	080078ab 	.word	0x080078ab
 8007638:	080078ab 	.word	0x080078ab
 800763c:	080078ab 	.word	0x080078ab
 8007640:	080078ab 	.word	0x080078ab
 8007644:	08007649 	.word	0x08007649
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	7c12      	ldrb	r2, [r2, #16]
 8007660:	f107 0108 	add.w	r1, r7, #8
 8007664:	4610      	mov	r0, r2
 8007666:	4798      	blx	r3
 8007668:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800766a:	e126      	b.n	80078ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 fb27 	bl	8007cc2 <USBD_CtlError>
        err++;
 8007674:	7afb      	ldrb	r3, [r7, #11]
 8007676:	3301      	adds	r3, #1
 8007678:	72fb      	strb	r3, [r7, #11]
      break;
 800767a:	e11e      	b.n	80078ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	7c12      	ldrb	r2, [r2, #16]
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	4610      	mov	r0, r2
 800768e:	4798      	blx	r3
 8007690:	60f8      	str	r0, [r7, #12]
      break;
 8007692:	e112      	b.n	80078ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	7c1b      	ldrb	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d10d      	bne.n	80076b8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	f107 0208 	add.w	r2, r7, #8
 80076a8:	4610      	mov	r0, r2
 80076aa:	4798      	blx	r3
 80076ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	3301      	adds	r3, #1
 80076b2:	2202      	movs	r2, #2
 80076b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076b6:	e100      	b.n	80078ba <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	f107 0208 	add.w	r2, r7, #8
 80076c4:	4610      	mov	r0, r2
 80076c6:	4798      	blx	r3
 80076c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3301      	adds	r3, #1
 80076ce:	2202      	movs	r2, #2
 80076d0:	701a      	strb	r2, [r3, #0]
      break;
 80076d2:	e0f2      	b.n	80078ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	885b      	ldrh	r3, [r3, #2]
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b05      	cmp	r3, #5
 80076dc:	f200 80ac 	bhi.w	8007838 <USBD_GetDescriptor+0x258>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <USBD_GetDescriptor+0x108>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	08007701 	.word	0x08007701
 80076ec:	08007735 	.word	0x08007735
 80076f0:	08007769 	.word	0x08007769
 80076f4:	0800779d 	.word	0x0800779d
 80076f8:	080077d1 	.word	0x080077d1
 80076fc:	08007805 	.word	0x08007805
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007722:	e091      	b.n	8007848 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 facb 	bl	8007cc2 <USBD_CtlError>
            err++;
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	3301      	adds	r3, #1
 8007730:	72fb      	strb	r3, [r7, #11]
          break;
 8007732:	e089      	b.n	8007848 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007756:	e077      	b.n	8007848 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fab1 	bl	8007cc2 <USBD_CtlError>
            err++;
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	3301      	adds	r3, #1
 8007764:	72fb      	strb	r3, [r7, #11]
          break;
 8007766:	e06f      	b.n	8007848 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7c12      	ldrb	r2, [r2, #16]
 8007780:	f107 0108 	add.w	r1, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778a:	e05d      	b.n	8007848 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa97 	bl	8007cc2 <USBD_CtlError>
            err++;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	3301      	adds	r3, #1
 8007798:	72fb      	strb	r3, [r7, #11]
          break;
 800779a:	e055      	b.n	8007848 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	7c12      	ldrb	r2, [r2, #16]
 80077b4:	f107 0108 	add.w	r1, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077be:	e043      	b.n	8007848 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa7d 	bl	8007cc2 <USBD_CtlError>
            err++;
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	3301      	adds	r3, #1
 80077cc:	72fb      	strb	r3, [r7, #11]
          break;
 80077ce:	e03b      	b.n	8007848 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7c12      	ldrb	r2, [r2, #16]
 80077e8:	f107 0108 	add.w	r1, r7, #8
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f2:	e029      	b.n	8007848 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa63 	bl	8007cc2 <USBD_CtlError>
            err++;
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	3301      	adds	r3, #1
 8007800:	72fb      	strb	r3, [r7, #11]
          break;
 8007802:	e021      	b.n	8007848 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	7c12      	ldrb	r2, [r2, #16]
 800781c:	f107 0108 	add.w	r1, r7, #8
 8007820:	4610      	mov	r0, r2
 8007822:	4798      	blx	r3
 8007824:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007826:	e00f      	b.n	8007848 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007828:	6839      	ldr	r1, [r7, #0]
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 fa49 	bl	8007cc2 <USBD_CtlError>
            err++;
 8007830:	7afb      	ldrb	r3, [r7, #11]
 8007832:	3301      	adds	r3, #1
 8007834:	72fb      	strb	r3, [r7, #11]
          break;
 8007836:	e007      	b.n	8007848 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fa41 	bl	8007cc2 <USBD_CtlError>
          err++;
 8007840:	7afb      	ldrb	r3, [r7, #11]
 8007842:	3301      	adds	r3, #1
 8007844:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007846:	bf00      	nop
      }
      break;
 8007848:	e037      	b.n	80078ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	7c1b      	ldrb	r3, [r3, #16]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800785a:	f107 0208 	add.w	r2, r7, #8
 800785e:	4610      	mov	r0, r2
 8007860:	4798      	blx	r3
 8007862:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007864:	e029      	b.n	80078ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fa2a 	bl	8007cc2 <USBD_CtlError>
        err++;
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	3301      	adds	r3, #1
 8007872:	72fb      	strb	r3, [r7, #11]
      break;
 8007874:	e021      	b.n	80078ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7c1b      	ldrb	r3, [r3, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10d      	bne.n	800789a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	f107 0208 	add.w	r2, r7, #8
 800788a:	4610      	mov	r0, r2
 800788c:	4798      	blx	r3
 800788e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3301      	adds	r3, #1
 8007894:	2207      	movs	r2, #7
 8007896:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007898:	e00f      	b.n	80078ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fa10 	bl	8007cc2 <USBD_CtlError>
        err++;
 80078a2:	7afb      	ldrb	r3, [r7, #11]
 80078a4:	3301      	adds	r3, #1
 80078a6:	72fb      	strb	r3, [r7, #11]
      break;
 80078a8:	e007      	b.n	80078ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80078aa:	6839      	ldr	r1, [r7, #0]
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fa08 	bl	8007cc2 <USBD_CtlError>
      err++;
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	3301      	adds	r3, #1
 80078b6:	72fb      	strb	r3, [r7, #11]
      break;
 80078b8:	bf00      	nop
  }

  if (err != 0U)
 80078ba:	7afb      	ldrb	r3, [r7, #11]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11e      	bne.n	80078fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	88db      	ldrh	r3, [r3, #6]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d016      	beq.n	80078f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80078c8:	893b      	ldrh	r3, [r7, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00e      	beq.n	80078ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	88da      	ldrh	r2, [r3, #6]
 80078d2:	893b      	ldrh	r3, [r7, #8]
 80078d4:	4293      	cmp	r3, r2
 80078d6:	bf28      	it	cs
 80078d8:	4613      	movcs	r3, r2
 80078da:	b29b      	uxth	r3, r3
 80078dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078de:	893b      	ldrh	r3, [r7, #8]
 80078e0:	461a      	mov	r2, r3
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fa5d 	bl	8007da4 <USBD_CtlSendData>
 80078ea:	e009      	b.n	8007900 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f9e7 	bl	8007cc2 <USBD_CtlError>
 80078f4:	e004      	b.n	8007900 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 faae 	bl	8007e58 <USBD_CtlSendStatus>
 80078fc:	e000      	b.n	8007900 <USBD_GetDescriptor+0x320>
    return;
 80078fe:	bf00      	nop
  }
}
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop

08007908 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	889b      	ldrh	r3, [r3, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d131      	bne.n	800797e <USBD_SetAddress+0x76>
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	88db      	ldrh	r3, [r3, #6]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d12d      	bne.n	800797e <USBD_SetAddress+0x76>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	2b7f      	cmp	r3, #127	; 0x7f
 8007928:	d829      	bhi.n	800797e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	885b      	ldrh	r3, [r3, #2]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007934:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d104      	bne.n	800794c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007942:	6839      	ldr	r1, [r7, #0]
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 f9bc 	bl	8007cc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800794a:	e01d      	b.n	8007988 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	7bfa      	ldrb	r2, [r7, #15]
 8007950:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 ff4f 	bl	80087fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fa7a 	bl	8007e58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007964:	7bfb      	ldrb	r3, [r7, #15]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d004      	beq.n	8007974 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007972:	e009      	b.n	8007988 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797c:	e004      	b.n	8007988 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800797e:	6839      	ldr	r1, [r7, #0]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 f99e 	bl	8007cc2 <USBD_CtlError>
  }
}
 8007986:	bf00      	nop
 8007988:	bf00      	nop
 800798a:	3710      	adds	r7, #16
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	885b      	ldrh	r3, [r3, #2]
 80079a2:	b2da      	uxtb	r2, r3
 80079a4:	4b4e      	ldr	r3, [pc, #312]	; (8007ae0 <USBD_SetConfig+0x150>)
 80079a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079a8:	4b4d      	ldr	r3, [pc, #308]	; (8007ae0 <USBD_SetConfig+0x150>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d905      	bls.n	80079bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f985 	bl	8007cc2 <USBD_CtlError>
    return USBD_FAIL;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e08c      	b.n	8007ad6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d002      	beq.n	80079ce <USBD_SetConfig+0x3e>
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d029      	beq.n	8007a20 <USBD_SetConfig+0x90>
 80079cc:	e075      	b.n	8007aba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80079ce:	4b44      	ldr	r3, [pc, #272]	; (8007ae0 <USBD_SetConfig+0x150>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d020      	beq.n	8007a18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80079d6:	4b42      	ldr	r3, [pc, #264]	; (8007ae0 <USBD_SetConfig+0x150>)
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80079e0:	4b3f      	ldr	r3, [pc, #252]	; (8007ae0 <USBD_SetConfig+0x150>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fe ffbd 	bl	8006966 <USBD_SetClassConfig>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d008      	beq.n	8007a08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80079f6:	6839      	ldr	r1, [r7, #0]
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f962 	bl	8007cc2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2202      	movs	r2, #2
 8007a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a06:	e065      	b.n	8007ad4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fa25 	bl	8007e58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2203      	movs	r2, #3
 8007a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007a16:	e05d      	b.n	8007ad4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fa1d 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007a1e:	e059      	b.n	8007ad4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a20:	4b2f      	ldr	r3, [pc, #188]	; (8007ae0 <USBD_SetConfig+0x150>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d112      	bne.n	8007a4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007a30:	4b2b      	ldr	r3, [pc, #172]	; (8007ae0 <USBD_SetConfig+0x150>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a3a:	4b29      	ldr	r3, [pc, #164]	; (8007ae0 <USBD_SetConfig+0x150>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fe ffac 	bl	800699e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fa06 	bl	8007e58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a4c:	e042      	b.n	8007ad4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007a4e:	4b24      	ldr	r3, [pc, #144]	; (8007ae0 <USBD_SetConfig+0x150>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d02a      	beq.n	8007ab2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7fe ff9a 	bl	800699e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <USBD_SetConfig+0x150>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a74:	4b1a      	ldr	r3, [pc, #104]	; (8007ae0 <USBD_SetConfig+0x150>)
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f7fe ff73 	bl	8006966 <USBD_SetClassConfig>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00f      	beq.n	8007aaa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007a8a:	6839      	ldr	r1, [r7, #0]
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f918 	bl	8007cc2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fe ff7f 	bl	800699e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007aa8:	e014      	b.n	8007ad4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9d4 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007ab0:	e010      	b.n	8007ad4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f9d0 	bl	8007e58 <USBD_CtlSendStatus>
      break;
 8007ab8:	e00c      	b.n	8007ad4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007aba:	6839      	ldr	r1, [r7, #0]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f900 	bl	8007cc2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ac2:	4b07      	ldr	r3, [pc, #28]	; (8007ae0 <USBD_SetConfig+0x150>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7fe ff68 	bl	800699e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad2:	bf00      	nop
  }

  return ret;
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3710      	adds	r7, #16
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	200002c4 	.word	0x200002c4

08007ae4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88db      	ldrh	r3, [r3, #6]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d004      	beq.n	8007b00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007af6:	6839      	ldr	r1, [r7, #0]
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 f8e2 	bl	8007cc2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007afe:	e023      	b.n	8007b48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	dc02      	bgt.n	8007b12 <USBD_GetConfig+0x2e>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dc03      	bgt.n	8007b18 <USBD_GetConfig+0x34>
 8007b10:	e015      	b.n	8007b3e <USBD_GetConfig+0x5a>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d00b      	beq.n	8007b2e <USBD_GetConfig+0x4a>
 8007b16:	e012      	b.n	8007b3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3308      	adds	r3, #8
 8007b22:	2201      	movs	r2, #1
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f93c 	bl	8007da4 <USBD_CtlSendData>
        break;
 8007b2c:	e00c      	b.n	8007b48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3304      	adds	r3, #4
 8007b32:	2201      	movs	r2, #1
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f934 	bl	8007da4 <USBD_CtlSendData>
        break;
 8007b3c:	e004      	b.n	8007b48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 f8be 	bl	8007cc2 <USBD_CtlError>
        break;
 8007b46:	bf00      	nop
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d81e      	bhi.n	8007ba6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	88db      	ldrh	r3, [r3, #6]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d004      	beq.n	8007b7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f8a5 	bl	8007cc2 <USBD_CtlError>
        break;
 8007b78:	e01a      	b.n	8007bb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d005      	beq.n	8007b96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f043 0202 	orr.w	r2, r3, #2
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	330c      	adds	r3, #12
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f900 	bl	8007da4 <USBD_CtlSendData>
      break;
 8007ba4:	e004      	b.n	8007bb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ba6:	6839      	ldr	r1, [r7, #0]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f88a 	bl	8007cc2 <USBD_CtlError>
      break;
 8007bae:	bf00      	nop
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	885b      	ldrh	r3, [r3, #2]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d107      	bne.n	8007bda <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2201      	movs	r2, #1
 8007bce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f940 	bl	8007e58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007bd8:	e013      	b.n	8007c02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	885b      	ldrh	r3, [r3, #2]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d10b      	bne.n	8007bfa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	889b      	ldrh	r3, [r3, #4]
 8007be6:	0a1b      	lsrs	r3, r3, #8
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f930 	bl	8007e58 <USBD_CtlSendStatus>
}
 8007bf8:	e003      	b.n	8007c02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 f860 	bl	8007cc2 <USBD_CtlError>
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d80b      	bhi.n	8007c3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	885b      	ldrh	r3, [r3, #2]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d10c      	bne.n	8007c44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f910 	bl	8007e58 <USBD_CtlSendStatus>
      }
      break;
 8007c38:	e004      	b.n	8007c44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f840 	bl	8007cc2 <USBD_CtlError>
      break;
 8007c42:	e000      	b.n	8007c46 <USBD_ClrFeature+0x3c>
      break;
 8007c44:	bf00      	nop
  }
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	781a      	ldrb	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	781a      	ldrb	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	3301      	adds	r3, #1
 8007c76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f7ff fa17 	bl	80070ac <SWAPBYTE>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	461a      	mov	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f7ff fa0a 	bl	80070ac <SWAPBYTE>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3301      	adds	r3, #1
 8007caa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff f9fd 	bl	80070ac <SWAPBYTE>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	80da      	strh	r2, [r3, #6]
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ccc:	2180      	movs	r1, #128	; 0x80
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fd2a 	bl	8008728 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fd26 	bl	8008728 <USBD_LL_StallEP>
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d036      	beq.n	8007d68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007cfe:	6938      	ldr	r0, [r7, #16]
 8007d00:	f000 f836 	bl	8007d70 <USBD_GetLen>
 8007d04:	4603      	mov	r3, r0
 8007d06:	3301      	adds	r3, #1
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	005b      	lsls	r3, r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	4413      	add	r3, r2
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	3301      	adds	r3, #1
 8007d22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	4413      	add	r3, r2
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d2e:	7dfb      	ldrb	r3, [r7, #23]
 8007d30:	3301      	adds	r3, #1
 8007d32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007d34:	e013      	b.n	8007d5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	3301      	adds	r3, #1
 8007d46:	613b      	str	r3, [r7, #16]
    idx++;
 8007d48:	7dfb      	ldrb	r3, [r7, #23]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	4413      	add	r3, r2
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
    idx++;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e7      	bne.n	8007d36 <USBD_GetString+0x52>
 8007d66:	e000      	b.n	8007d6a <USBD_GetString+0x86>
    return;
 8007d68:	bf00      	nop
  }
}
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007d80:	e005      	b.n	8007d8e <USBD_GetLen+0x1e>
  {
    len++;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	3301      	adds	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f5      	bne.n	8007d82 <USBD_GetLen+0x12>
  }

  return len;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f000 fd35 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	60f8      	str	r0, [r7, #12]
 8007de2:	60b9      	str	r1, [r7, #8]
 8007de4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	2100      	movs	r1, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fd24 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	2100      	movs	r1, #0
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 fd28 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	60f8      	str	r0, [r7, #12]
 8007e3e:	60b9      	str	r1, [r7, #8]
 8007e40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	2100      	movs	r1, #0
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f000 fd17 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2204      	movs	r2, #4
 8007e64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fce3 	bl	800883a <USBD_LL_Transmit>

  return USBD_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2205      	movs	r2, #5
 8007e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e8e:	2300      	movs	r3, #0
 8007e90:	2200      	movs	r2, #0
 8007e92:	2100      	movs	r1, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fcf1 	bl	800887c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	4912      	ldr	r1, [pc, #72]	; (8007ef4 <MX_USB_DEVICE_Init+0x50>)
 8007eac:	4812      	ldr	r0, [pc, #72]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007eae:	f7fe fcdd 	bl	800686c <USBD_Init>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007eb8:	f7f8 fd84 	bl	80009c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007ebc:	490f      	ldr	r1, [pc, #60]	; (8007efc <MX_USB_DEVICE_Init+0x58>)
 8007ebe:	480e      	ldr	r0, [pc, #56]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ec0:	f7fe fd04 	bl	80068cc <USBD_RegisterClass>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007eca:	f7f8 fd7b 	bl	80009c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007ece:	490c      	ldr	r1, [pc, #48]	; (8007f00 <MX_USB_DEVICE_Init+0x5c>)
 8007ed0:	4809      	ldr	r0, [pc, #36]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ed2:	f7fe fbfb 	bl	80066cc <USBD_CDC_RegisterInterface>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007edc:	f7f8 fd72 	bl	80009c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ee0:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <MX_USB_DEVICE_Init+0x54>)
 8007ee2:	f7fe fd29 	bl	8006938 <USBD_Start>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007eec:	f7f8 fd6a 	bl	80009c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007ef0:	bf00      	nop
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	200000ac 	.word	0x200000ac
 8007ef8:	200002c8 	.word	0x200002c8
 8007efc:	20000018 	.word	0x20000018
 8007f00:	20000098 	.word	0x20000098

08007f04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	4905      	ldr	r1, [pc, #20]	; (8007f20 <CDC_Init_FS+0x1c>)
 8007f0c:	4805      	ldr	r0, [pc, #20]	; (8007f24 <CDC_Init_FS+0x20>)
 8007f0e:	f7fe fbf7 	bl	8006700 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f12:	4905      	ldr	r1, [pc, #20]	; (8007f28 <CDC_Init_FS+0x24>)
 8007f14:	4803      	ldr	r0, [pc, #12]	; (8007f24 <CDC_Init_FS+0x20>)
 8007f16:	f7fe fc15 	bl	8006744 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20000da4 	.word	0x20000da4
 8007f24:	200002c8 	.word	0x200002c8
 8007f28:	200005a4 	.word	0x200005a4

08007f2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	4603      	mov	r3, r0
 8007f44:	6039      	str	r1, [r7, #0]
 8007f46:	71fb      	strb	r3, [r7, #7]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	2b23      	cmp	r3, #35	; 0x23
 8007f50:	d84a      	bhi.n	8007fe8 <CDC_Control_FS+0xac>
 8007f52:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <CDC_Control_FS+0x1c>)
 8007f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f58:	08007fe9 	.word	0x08007fe9
 8007f5c:	08007fe9 	.word	0x08007fe9
 8007f60:	08007fe9 	.word	0x08007fe9
 8007f64:	08007fe9 	.word	0x08007fe9
 8007f68:	08007fe9 	.word	0x08007fe9
 8007f6c:	08007fe9 	.word	0x08007fe9
 8007f70:	08007fe9 	.word	0x08007fe9
 8007f74:	08007fe9 	.word	0x08007fe9
 8007f78:	08007fe9 	.word	0x08007fe9
 8007f7c:	08007fe9 	.word	0x08007fe9
 8007f80:	08007fe9 	.word	0x08007fe9
 8007f84:	08007fe9 	.word	0x08007fe9
 8007f88:	08007fe9 	.word	0x08007fe9
 8007f8c:	08007fe9 	.word	0x08007fe9
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	08007fe9 	.word	0x08007fe9
 8007fa4:	08007fe9 	.word	0x08007fe9
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007fe9 	.word	0x08007fe9
 8007fb0:	08007fe9 	.word	0x08007fe9
 8007fb4:	08007fe9 	.word	0x08007fe9
 8007fb8:	08007fe9 	.word	0x08007fe9
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	08007fe9 	.word	0x08007fe9
 8007fc4:	08007fe9 	.word	0x08007fe9
 8007fc8:	08007fe9 	.word	0x08007fe9
 8007fcc:	08007fe9 	.word	0x08007fe9
 8007fd0:	08007fe9 	.word	0x08007fe9
 8007fd4:	08007fe9 	.word	0x08007fe9
 8007fd8:	08007fe9 	.word	0x08007fe9
 8007fdc:	08007fe9 	.word	0x08007fe9
 8007fe0:	08007fe9 	.word	0x08007fe9
 8007fe4:	08007fe9 	.word	0x08007fe9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007fe8:	bf00      	nop
  }

  return (USBD_OK);
 8007fea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008002:	6879      	ldr	r1, [r7, #4]
 8008004:	4810      	ldr	r0, [pc, #64]	; (8008048 <CDC_Receive_FS+0x50>)
 8008006:	f7fe fb9d 	bl	8006744 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800800a:	480f      	ldr	r0, [pc, #60]	; (8008048 <CDC_Receive_FS+0x50>)
 800800c:	f7fe fbf8 	bl	8006800 <USBD_CDC_ReceivePacket>

  memset(buffer, '\0', 64);
 8008010:	2240      	movs	r2, #64	; 0x40
 8008012:	2100      	movs	r1, #0
 8008014:	480d      	ldr	r0, [pc, #52]	; (800804c <CDC_Receive_FS+0x54>)
 8008016:	f000 fd3d 	bl	8008a94 <memset>
  memcpy(buffer, Buf, *Len);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	480a      	ldr	r0, [pc, #40]	; (800804c <CDC_Receive_FS+0x54>)
 8008024:	f000 fd28 	bl	8008a78 <memcpy>
  memset(Buf, '\0', *Len);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	2100      	movs	r1, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fd2f 	bl	8008a94 <memset>
  Message_Available = 1;
 8008036:	4b06      	ldr	r3, [pc, #24]	; (8008050 <CDC_Receive_FS+0x58>)
 8008038:	2201      	movs	r2, #1
 800803a:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800803c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	200002c8 	.word	0x200002c8
 800804c:	20000274 	.word	0x20000274
 8008050:	200002b4 	.word	0x200002b4

08008054 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008064:	4b0d      	ldr	r3, [pc, #52]	; (800809c <CDC_Transmit_FS+0x48>)
 8008066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800806a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008076:	2301      	movs	r3, #1
 8008078:	e00b      	b.n	8008092 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800807a:	887b      	ldrh	r3, [r7, #2]
 800807c:	461a      	mov	r2, r3
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4806      	ldr	r0, [pc, #24]	; (800809c <CDC_Transmit_FS+0x48>)
 8008082:	f7fe fb3d 	bl	8006700 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008086:	4805      	ldr	r0, [pc, #20]	; (800809c <CDC_Transmit_FS+0x48>)
 8008088:	f7fe fb7a 	bl	8006780 <USBD_CDC_TransmitPacket>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008090:	7bfb      	ldrb	r3, [r7, #15]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
 800809a:	bf00      	nop
 800809c:	200002c8 	.word	0x200002c8

080080a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	371c      	adds	r7, #28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
	...

080080c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	4603      	mov	r3, r0
 80080cc:	6039      	str	r1, [r7, #0]
 80080ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2212      	movs	r2, #18
 80080d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080d6:	4b03      	ldr	r3, [pc, #12]	; (80080e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	200000cc 	.word	0x200000cc

080080e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	4603      	mov	r3, r0
 80080f0:	6039      	str	r1, [r7, #0]
 80080f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2204      	movs	r2, #4
 80080f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080fa:	4b03      	ldr	r3, [pc, #12]	; (8008108 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	200000ec 	.word	0x200000ec

0800810c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d105      	bne.n	800812a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	4907      	ldr	r1, [pc, #28]	; (8008140 <USBD_FS_ProductStrDescriptor+0x34>)
 8008122:	4808      	ldr	r0, [pc, #32]	; (8008144 <USBD_FS_ProductStrDescriptor+0x38>)
 8008124:	f7ff fdde 	bl	8007ce4 <USBD_GetString>
 8008128:	e004      	b.n	8008134 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4904      	ldr	r1, [pc, #16]	; (8008140 <USBD_FS_ProductStrDescriptor+0x34>)
 800812e:	4805      	ldr	r0, [pc, #20]	; (8008144 <USBD_FS_ProductStrDescriptor+0x38>)
 8008130:	f7ff fdd8 	bl	8007ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008134:	4b02      	ldr	r3, [pc, #8]	; (8008140 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	200015a4 	.word	0x200015a4
 8008144:	08008d54 	.word	0x08008d54

08008148 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	4603      	mov	r3, r0
 8008150:	6039      	str	r1, [r7, #0]
 8008152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008154:	683a      	ldr	r2, [r7, #0]
 8008156:	4904      	ldr	r1, [pc, #16]	; (8008168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008158:	4804      	ldr	r0, [pc, #16]	; (800816c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800815a:	f7ff fdc3 	bl	8007ce4 <USBD_GetString>
  return USBD_StrDesc;
 800815e:	4b02      	ldr	r3, [pc, #8]	; (8008168 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	200015a4 	.word	0x200015a4
 800816c:	08008d6c 	.word	0x08008d6c

08008170 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	221a      	movs	r2, #26
 8008180:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008182:	f000 f855 	bl	8008230 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008186:	4b02      	ldr	r3, [pc, #8]	; (8008190 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200000f0 	.word	0x200000f0

08008194 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	6039      	str	r1, [r7, #0]
 800819e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081a0:	79fb      	ldrb	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081a6:	683a      	ldr	r2, [r7, #0]
 80081a8:	4907      	ldr	r1, [pc, #28]	; (80081c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081aa:	4808      	ldr	r0, [pc, #32]	; (80081cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80081ac:	f7ff fd9a 	bl	8007ce4 <USBD_GetString>
 80081b0:	e004      	b.n	80081bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	4904      	ldr	r1, [pc, #16]	; (80081c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081b6:	4805      	ldr	r0, [pc, #20]	; (80081cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80081b8:	f7ff fd94 	bl	8007ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	200015a4 	.word	0x200015a4
 80081cc:	08008d80 	.word	0x08008d80

080081d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	6039      	str	r1, [r7, #0]
 80081da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081dc:	79fb      	ldrb	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	4907      	ldr	r1, [pc, #28]	; (8008204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081e6:	4808      	ldr	r0, [pc, #32]	; (8008208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081e8:	f7ff fd7c 	bl	8007ce4 <USBD_GetString>
 80081ec:	e004      	b.n	80081f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4904      	ldr	r1, [pc, #16]	; (8008204 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081f2:	4805      	ldr	r0, [pc, #20]	; (8008208 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081f4:	f7ff fd76 	bl	8007ce4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081f8:	4b02      	ldr	r3, [pc, #8]	; (8008204 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	200015a4 	.word	0x200015a4
 8008208:	08008d8c 	.word	0x08008d8c

0800820c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	6039      	str	r1, [r7, #0]
 8008216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	220c      	movs	r2, #12
 800821c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800821e:	4b03      	ldr	r3, [pc, #12]	; (800822c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008220:	4618      	mov	r0, r3
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	200000e0 	.word	0x200000e0

08008230 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <Get_SerialNum+0x44>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800823c:	4b0e      	ldr	r3, [pc, #56]	; (8008278 <Get_SerialNum+0x48>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <Get_SerialNum+0x4c>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4413      	add	r3, r2
 800824e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d009      	beq.n	800826a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008256:	2208      	movs	r2, #8
 8008258:	4909      	ldr	r1, [pc, #36]	; (8008280 <Get_SerialNum+0x50>)
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 f814 	bl	8008288 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008260:	2204      	movs	r2, #4
 8008262:	4908      	ldr	r1, [pc, #32]	; (8008284 <Get_SerialNum+0x54>)
 8008264:	68b8      	ldr	r0, [r7, #8]
 8008266:	f000 f80f 	bl	8008288 <IntToUnicode>
  }
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	1ff0f420 	.word	0x1ff0f420
 8008278:	1ff0f424 	.word	0x1ff0f424
 800827c:	1ff0f428 	.word	0x1ff0f428
 8008280:	200000f2 	.word	0x200000f2
 8008284:	20000102 	.word	0x20000102

08008288 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]
 800829e:	e027      	b.n	80082f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	0f1b      	lsrs	r3, r3, #28
 80082a4:	2b09      	cmp	r3, #9
 80082a6:	d80b      	bhi.n	80082c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	0f1b      	lsrs	r3, r3, #28
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	4619      	mov	r1, r3
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	440b      	add	r3, r1
 80082b8:	3230      	adds	r2, #48	; 0x30
 80082ba:	b2d2      	uxtb	r2, r2
 80082bc:	701a      	strb	r2, [r3, #0]
 80082be:	e00a      	b.n	80082d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	0f1b      	lsrs	r3, r3, #28
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	4619      	mov	r1, r3
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	440b      	add	r3, r1
 80082d0:	3237      	adds	r2, #55	; 0x37
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	005b      	lsls	r3, r3, #1
 80082e0:	3301      	adds	r3, #1
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	4413      	add	r3, r2
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	3301      	adds	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
 80082f0:	7dfa      	ldrb	r2, [r7, #23]
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d3d3      	bcc.n	80082a0 <IntToUnicode+0x18>
  }
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
	...

08008308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b0ac      	sub	sp, #176	; 0xb0
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	605a      	str	r2, [r3, #4]
 800831a:	609a      	str	r2, [r3, #8]
 800831c:	60da      	str	r2, [r3, #12]
 800831e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008320:	f107 0318 	add.w	r3, r7, #24
 8008324:	2284      	movs	r2, #132	; 0x84
 8008326:	2100      	movs	r1, #0
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fbb3 	bl	8008a94 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008336:	d151      	bne.n	80083dc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8008338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800833c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800833e:	2300      	movs	r3, #0
 8008340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008344:	f107 0318 	add.w	r3, r7, #24
 8008348:	4618      	mov	r0, r3
 800834a:	f7fa fefb 	bl	8003144 <HAL_RCCEx_PeriphCLKConfig>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8008354:	f7f8 fb36 	bl	80009c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008358:	4b22      	ldr	r3, [pc, #136]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 800835a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835c:	4a21      	ldr	r2, [pc, #132]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 800835e:	f043 0301 	orr.w	r3, r3, #1
 8008362:	6313      	str	r3, [r2, #48]	; 0x30
 8008364:	4b1f      	ldr	r3, [pc, #124]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008370:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008374:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008378:	2302      	movs	r3, #2
 800837a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837e:	2300      	movs	r3, #0
 8008380:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008384:	2303      	movs	r3, #3
 8008386:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800838a:	230a      	movs	r3, #10
 800838c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008390:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008394:	4619      	mov	r1, r3
 8008396:	4814      	ldr	r0, [pc, #80]	; (80083e8 <HAL_PCD_MspInit+0xe0>)
 8008398:	f7f8 fdce 	bl	8000f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800839c:	4b11      	ldr	r3, [pc, #68]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 800839e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083a0:	4a10      	ldr	r2, [pc, #64]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 80083a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a6:	6353      	str	r3, [r2, #52]	; 0x34
 80083a8:	4b0e      	ldr	r3, [pc, #56]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 80083aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 80083b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b8:	4a0a      	ldr	r2, [pc, #40]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 80083ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083be:	6453      	str	r3, [r2, #68]	; 0x44
 80083c0:	4b08      	ldr	r3, [pc, #32]	; (80083e4 <HAL_PCD_MspInit+0xdc>)
 80083c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c8:	60fb      	str	r3, [r7, #12]
 80083ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083cc:	2200      	movs	r2, #0
 80083ce:	2100      	movs	r1, #0
 80083d0:	2043      	movs	r0, #67	; 0x43
 80083d2:	f7f8 fd7a 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083d6:	2043      	movs	r0, #67	; 0x43
 80083d8:	f7f8 fd93 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083dc:	bf00      	nop
 80083de:	37b0      	adds	r7, #176	; 0xb0
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40020000 	.word	0x40020000

080083ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008400:	4619      	mov	r1, r3
 8008402:	4610      	mov	r0, r2
 8008404:	f7fe fae5 	bl	80069d2 <USBD_LL_SetupStage>
}
 8008408:	bf00      	nop
 800840a:	3708      	adds	r7, #8
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008422:	78fa      	ldrb	r2, [r7, #3]
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	4619      	mov	r1, r3
 800843a:	f7fe fb1f 	bl	8006a7c <USBD_LL_DataOutStage>
}
 800843e:	bf00      	nop
 8008440:	3708      	adds	r7, #8
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}

08008446 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b082      	sub	sp, #8
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
 800844e:	460b      	mov	r3, r1
 8008450:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	00db      	lsls	r3, r3, #3
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	334c      	adds	r3, #76	; 0x4c
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	78fb      	ldrb	r3, [r7, #3]
 800846c:	4619      	mov	r1, r3
 800846e:	f7fe fbb8 	bl	8006be2 <USBD_LL_DataInStage>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe fcec 	bl	8006e66 <USBD_LL_SOF>
}
 800848e:	bf00      	nop
 8008490:	3708      	adds	r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d102      	bne.n	80084b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084aa:	2300      	movs	r3, #0
 80084ac:	73fb      	strb	r3, [r7, #15]
 80084ae:	e008      	b.n	80084c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	2b02      	cmp	r3, #2
 80084b6:	d102      	bne.n	80084be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084b8:	2301      	movs	r3, #1
 80084ba:	73fb      	strb	r3, [r7, #15]
 80084bc:	e001      	b.n	80084c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084be:	f7f8 fa81 	bl	80009c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80084c8:	7bfa      	ldrb	r2, [r7, #15]
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe fc8c 	bl	8006dea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fc34 	bl	8006d46 <USBD_LL_Reset>
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
	...

080084e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7fe fc87 	bl	8006e0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	6812      	ldr	r2, [r2, #0]
 800850a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800850e:	f043 0301 	orr.w	r3, r3, #1
 8008512:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d005      	beq.n	8008528 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <HAL_PCD_SuspendCallback+0x48>)
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	4a03      	ldr	r2, [pc, #12]	; (8008530 <HAL_PCD_SuspendCallback+0x48>)
 8008522:	f043 0306 	orr.w	r3, r3, #6
 8008526:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008528:	bf00      	nop
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	e000ed00 	.word	0xe000ed00

08008534 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fc77 	bl	8006e36 <USBD_LL_Resume>
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	4611      	mov	r1, r2
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fccf 	bl	8006f0a <USBD_LL_IsoOUTIncomplete>
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	4611      	mov	r1, r2
 800858a:	4618      	mov	r0, r3
 800858c:	f7fe fc8b 	bl	8006ea6 <USBD_LL_IsoINIncomplete>
}
 8008590:	bf00      	nop
 8008592:	3708      	adds	r7, #8
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fe fce1 	bl	8006f6e <USBD_LL_DevConnected>
}
 80085ac:	bf00      	nop
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7fe fcde 	bl	8006f84 <USBD_LL_DevDisconnected>
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d13c      	bne.n	800865a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085e0:	4a20      	ldr	r2, [pc, #128]	; (8008664 <USBD_LL_Init+0x94>)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a1e      	ldr	r2, [pc, #120]	; (8008664 <USBD_LL_Init+0x94>)
 80085ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085f0:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <USBD_LL_Init+0x94>)
 80085f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80085f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80085f8:	4b1a      	ldr	r3, [pc, #104]	; (8008664 <USBD_LL_Init+0x94>)
 80085fa:	2206      	movs	r2, #6
 80085fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80085fe:	4b19      	ldr	r3, [pc, #100]	; (8008664 <USBD_LL_Init+0x94>)
 8008600:	2202      	movs	r2, #2
 8008602:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <USBD_LL_Init+0x94>)
 8008606:	2200      	movs	r2, #0
 8008608:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800860a:	4b16      	ldr	r3, [pc, #88]	; (8008664 <USBD_LL_Init+0x94>)
 800860c:	2202      	movs	r2, #2
 800860e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008610:	4b14      	ldr	r3, [pc, #80]	; (8008664 <USBD_LL_Init+0x94>)
 8008612:	2200      	movs	r2, #0
 8008614:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <USBD_LL_Init+0x94>)
 8008618:	2200      	movs	r2, #0
 800861a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800861c:	4b11      	ldr	r3, [pc, #68]	; (8008664 <USBD_LL_Init+0x94>)
 800861e:	2200      	movs	r2, #0
 8008620:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008622:	4b10      	ldr	r3, [pc, #64]	; (8008664 <USBD_LL_Init+0x94>)
 8008624:	2200      	movs	r2, #0
 8008626:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008628:	4b0e      	ldr	r3, [pc, #56]	; (8008664 <USBD_LL_Init+0x94>)
 800862a:	2200      	movs	r2, #0
 800862c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800862e:	480d      	ldr	r0, [pc, #52]	; (8008664 <USBD_LL_Init+0x94>)
 8008630:	f7f8 fe2e 	bl	8001290 <HAL_PCD_Init>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800863a:	f7f8 f9c3 	bl	80009c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800863e:	2180      	movs	r1, #128	; 0x80
 8008640:	4808      	ldr	r0, [pc, #32]	; (8008664 <USBD_LL_Init+0x94>)
 8008642:	f7fa f8a8 	bl	8002796 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	2100      	movs	r1, #0
 800864a:	4806      	ldr	r0, [pc, #24]	; (8008664 <USBD_LL_Init+0x94>)
 800864c:	f7fa f85c 	bl	8002708 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008650:	2280      	movs	r2, #128	; 0x80
 8008652:	2101      	movs	r1, #1
 8008654:	4803      	ldr	r0, [pc, #12]	; (8008664 <USBD_LL_Init+0x94>)
 8008656:	f7fa f857 	bl	8002708 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	200017a4 	.word	0x200017a4

08008668 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008670:	2300      	movs	r3, #0
 8008672:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800867e:	4618      	mov	r0, r3
 8008680:	f7f8 ff2a 	bl	80014d8 <HAL_PCD_Start>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008688:	7bfb      	ldrb	r3, [r7, #15]
 800868a:	4618      	mov	r0, r3
 800868c:	f000 f97e 	bl	800898c <USBD_Get_USB_Status>
 8008690:	4603      	mov	r3, r0
 8008692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008694:	7bbb      	ldrb	r3, [r7, #14]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	4608      	mov	r0, r1
 80086a8:	4611      	mov	r1, r2
 80086aa:	461a      	mov	r2, r3
 80086ac:	4603      	mov	r3, r0
 80086ae:	70fb      	strb	r3, [r7, #3]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70bb      	strb	r3, [r7, #2]
 80086b4:	4613      	mov	r3, r2
 80086b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80086c6:	78bb      	ldrb	r3, [r7, #2]
 80086c8:	883a      	ldrh	r2, [r7, #0]
 80086ca:	78f9      	ldrb	r1, [r7, #3]
 80086cc:	f7f9 fc17 	bl	8001efe <HAL_PCD_EP_Open>
 80086d0:	4603      	mov	r3, r0
 80086d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d4:	7bfb      	ldrb	r3, [r7, #15]
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 f958 	bl	800898c <USBD_Get_USB_Status>
 80086dc:	4603      	mov	r3, r0
 80086de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008704:	78fa      	ldrb	r2, [r7, #3]
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7f9 fc60 	bl	8001fce <HAL_PCD_EP_Close>
 800870e:	4603      	mov	r3, r0
 8008710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 f939 	bl	800898c <USBD_Get_USB_Status>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800871e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008720:	4618      	mov	r0, r3
 8008722:	3710      	adds	r7, #16
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008742:	78fa      	ldrb	r2, [r7, #3]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7f9 fd38 	bl	80021bc <HAL_PCD_EP_SetStall>
 800874c:	4603      	mov	r3, r0
 800874e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008750:	7bfb      	ldrb	r3, [r7, #15]
 8008752:	4618      	mov	r0, r3
 8008754:	f000 f91a 	bl	800898c <USBD_Get_USB_Status>
 8008758:	4603      	mov	r3, r0
 800875a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875c:	7bbb      	ldrb	r3, [r7, #14]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
 800876e:	460b      	mov	r3, r1
 8008770:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7f9 fd7d 	bl	8002284 <HAL_PCD_EP_ClrStall>
 800878a:	4603      	mov	r3, r0
 800878c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 f8fb 	bl	800898c <USBD_Get_USB_Status>
 8008796:	4603      	mov	r3, r0
 8008798:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879a:	7bbb      	ldrb	r3, [r7, #14]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	460b      	mov	r3, r1
 80087ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80087b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da0b      	bge.n	80087d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	4613      	mov	r3, r2
 80087ca:	00db      	lsls	r3, r3, #3
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	333e      	adds	r3, #62	; 0x3e
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	e00b      	b.n	80087f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087d8:	78fb      	ldrb	r3, [r7, #3]
 80087da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087de:	68f9      	ldr	r1, [r7, #12]
 80087e0:	4613      	mov	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80087ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008808:	2300      	movs	r3, #0
 800880a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7f9 fb4a 	bl	8001eb4 <HAL_PCD_SetAddress>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 f8b0 	bl	800898c <USBD_Get_USB_Status>
 800882c:	4603      	mov	r3, r0
 800882e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008830:	7bbb      	ldrb	r3, [r7, #14]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b086      	sub	sp, #24
 800883e:	af00      	add	r7, sp, #0
 8008840:	60f8      	str	r0, [r7, #12]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	460b      	mov	r3, r1
 8008848:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008858:	7af9      	ldrb	r1, [r7, #11]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	f7f9 fc63 	bl	8002128 <HAL_PCD_EP_Transmit>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008866:	7dfb      	ldrb	r3, [r7, #23]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 f88f 	bl	800898c <USBD_Get_USB_Status>
 800886e:	4603      	mov	r3, r0
 8008870:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008872:	7dbb      	ldrb	r3, [r7, #22]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	607a      	str	r2, [r7, #4]
 8008886:	603b      	str	r3, [r7, #0]
 8008888:	460b      	mov	r3, r1
 800888a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800888c:	2300      	movs	r3, #0
 800888e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800889a:	7af9      	ldrb	r1, [r7, #11]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	f7f9 fbdf 	bl	8002062 <HAL_PCD_EP_Receive>
 80088a4:	4603      	mov	r3, r0
 80088a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f86e 	bl	800898c <USBD_Get_USB_Status>
 80088b0:	4603      	mov	r3, r0
 80088b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3718      	adds	r7, #24
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
 80088c6:	460b      	mov	r3, r1
 80088c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80088d0:	78fa      	ldrb	r2, [r7, #3]
 80088d2:	4611      	mov	r1, r2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7f9 fc0f 	bl	80020f8 <HAL_PCD_EP_GetRxCount>
 80088da:	4603      	mov	r3, r0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	460b      	mov	r3, r1
 80088ee:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80088f0:	78fb      	ldrb	r3, [r7, #3]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_PCDEx_LPM_Callback+0x18>
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d01f      	beq.n	800893a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80088fa:	e03b      	b.n	8008974 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d007      	beq.n	8008914 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8008904:	f000 f83c 	bl	8008980 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008908:	4b1c      	ldr	r3, [pc, #112]	; (800897c <HAL_PCDEx_LPM_Callback+0x98>)
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	4a1b      	ldr	r2, [pc, #108]	; (800897c <HAL_PCDEx_LPM_Callback+0x98>)
 800890e:	f023 0306 	bic.w	r3, r3, #6
 8008912:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	6812      	ldr	r2, [r2, #0]
 8008922:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008926:	f023 0301 	bic.w	r3, r3, #1
 800892a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fa7f 	bl	8006e36 <USBD_LL_Resume>
    break;
 8008938:	e01c      	b.n	8008974 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	6812      	ldr	r2, [r2, #0]
 8008948:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fa56 	bl	8006e0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d005      	beq.n	8008972 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008966:	4b05      	ldr	r3, [pc, #20]	; (800897c <HAL_PCDEx_LPM_Callback+0x98>)
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	4a04      	ldr	r2, [pc, #16]	; (800897c <HAL_PCDEx_LPM_Callback+0x98>)
 800896c:	f043 0306 	orr.w	r3, r3, #6
 8008970:	6113      	str	r3, [r2, #16]
    break;
 8008972:	bf00      	nop
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	e000ed00 	.word	0xe000ed00

08008980 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008984:	f7f7 ff2e 	bl	80007e4 <SystemClock_Config>
}
 8008988:	bf00      	nop
 800898a:	bd80      	pop	{r7, pc}

0800898c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d817      	bhi.n	80089d0 <USBD_Get_USB_Status+0x44>
 80089a0:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <USBD_Get_USB_Status+0x1c>)
 80089a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a6:	bf00      	nop
 80089a8:	080089b9 	.word	0x080089b9
 80089ac:	080089bf 	.word	0x080089bf
 80089b0:	080089c5 	.word	0x080089c5
 80089b4:	080089cb 	.word	0x080089cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]
    break;
 80089bc:	e00b      	b.n	80089d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80089be:	2303      	movs	r3, #3
 80089c0:	73fb      	strb	r3, [r7, #15]
    break;
 80089c2:	e008      	b.n	80089d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80089c4:	2301      	movs	r3, #1
 80089c6:	73fb      	strb	r3, [r7, #15]
    break;
 80089c8:	e005      	b.n	80089d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80089ca:	2303      	movs	r3, #3
 80089cc:	73fb      	strb	r3, [r7, #15]
    break;
 80089ce:	e002      	b.n	80089d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089d0:	2303      	movs	r3, #3
 80089d2:	73fb      	strb	r3, [r7, #15]
    break;
 80089d4:	bf00      	nop
  }
  return usb_status;
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3714      	adds	r7, #20
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <__errno>:
 80089e4:	4b01      	ldr	r3, [pc, #4]	; (80089ec <__errno+0x8>)
 80089e6:	6818      	ldr	r0, [r3, #0]
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	2000010c 	.word	0x2000010c

080089f0 <__libc_init_array>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	4d0d      	ldr	r5, [pc, #52]	; (8008a28 <__libc_init_array+0x38>)
 80089f4:	4c0d      	ldr	r4, [pc, #52]	; (8008a2c <__libc_init_array+0x3c>)
 80089f6:	1b64      	subs	r4, r4, r5
 80089f8:	10a4      	asrs	r4, r4, #2
 80089fa:	2600      	movs	r6, #0
 80089fc:	42a6      	cmp	r6, r4
 80089fe:	d109      	bne.n	8008a14 <__libc_init_array+0x24>
 8008a00:	4d0b      	ldr	r5, [pc, #44]	; (8008a30 <__libc_init_array+0x40>)
 8008a02:	4c0c      	ldr	r4, [pc, #48]	; (8008a34 <__libc_init_array+0x44>)
 8008a04:	f000 f94c 	bl	8008ca0 <_init>
 8008a08:	1b64      	subs	r4, r4, r5
 8008a0a:	10a4      	asrs	r4, r4, #2
 8008a0c:	2600      	movs	r6, #0
 8008a0e:	42a6      	cmp	r6, r4
 8008a10:	d105      	bne.n	8008a1e <__libc_init_array+0x2e>
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a18:	4798      	blx	r3
 8008a1a:	3601      	adds	r6, #1
 8008a1c:	e7ee      	b.n	80089fc <__libc_init_array+0xc>
 8008a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a22:	4798      	blx	r3
 8008a24:	3601      	adds	r6, #1
 8008a26:	e7f2      	b.n	8008a0e <__libc_init_array+0x1e>
 8008a28:	08008db4 	.word	0x08008db4
 8008a2c:	08008db4 	.word	0x08008db4
 8008a30:	08008db4 	.word	0x08008db4
 8008a34:	08008db8 	.word	0x08008db8

08008a38 <malloc>:
 8008a38:	4b02      	ldr	r3, [pc, #8]	; (8008a44 <malloc+0xc>)
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	6818      	ldr	r0, [r3, #0]
 8008a3e:	f000 b89d 	b.w	8008b7c <_malloc_r>
 8008a42:	bf00      	nop
 8008a44:	2000010c 	.word	0x2000010c

08008a48 <free>:
 8008a48:	4b02      	ldr	r3, [pc, #8]	; (8008a54 <free+0xc>)
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	6818      	ldr	r0, [r3, #0]
 8008a4e:	f000 b829 	b.w	8008aa4 <_free_r>
 8008a52:	bf00      	nop
 8008a54:	2000010c 	.word	0x2000010c

08008a58 <memcmp>:
 8008a58:	b510      	push	{r4, lr}
 8008a5a:	3901      	subs	r1, #1
 8008a5c:	4402      	add	r2, r0
 8008a5e:	4290      	cmp	r0, r2
 8008a60:	d101      	bne.n	8008a66 <memcmp+0xe>
 8008a62:	2000      	movs	r0, #0
 8008a64:	e005      	b.n	8008a72 <memcmp+0x1a>
 8008a66:	7803      	ldrb	r3, [r0, #0]
 8008a68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d001      	beq.n	8008a74 <memcmp+0x1c>
 8008a70:	1b18      	subs	r0, r3, r4
 8008a72:	bd10      	pop	{r4, pc}
 8008a74:	3001      	adds	r0, #1
 8008a76:	e7f2      	b.n	8008a5e <memcmp+0x6>

08008a78 <memcpy>:
 8008a78:	440a      	add	r2, r1
 8008a7a:	4291      	cmp	r1, r2
 8008a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a80:	d100      	bne.n	8008a84 <memcpy+0xc>
 8008a82:	4770      	bx	lr
 8008a84:	b510      	push	{r4, lr}
 8008a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a8e:	4291      	cmp	r1, r2
 8008a90:	d1f9      	bne.n	8008a86 <memcpy+0xe>
 8008a92:	bd10      	pop	{r4, pc}

08008a94 <memset>:
 8008a94:	4402      	add	r2, r0
 8008a96:	4603      	mov	r3, r0
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d100      	bne.n	8008a9e <memset+0xa>
 8008a9c:	4770      	bx	lr
 8008a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa2:	e7f9      	b.n	8008a98 <memset+0x4>

08008aa4 <_free_r>:
 8008aa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008aa6:	2900      	cmp	r1, #0
 8008aa8:	d044      	beq.n	8008b34 <_free_r+0x90>
 8008aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aae:	9001      	str	r0, [sp, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ab6:	bfb8      	it	lt
 8008ab8:	18e4      	addlt	r4, r4, r3
 8008aba:	f000 f8e3 	bl	8008c84 <__malloc_lock>
 8008abe:	4a1e      	ldr	r2, [pc, #120]	; (8008b38 <_free_r+0x94>)
 8008ac0:	9801      	ldr	r0, [sp, #4]
 8008ac2:	6813      	ldr	r3, [r2, #0]
 8008ac4:	b933      	cbnz	r3, 8008ad4 <_free_r+0x30>
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	6014      	str	r4, [r2, #0]
 8008aca:	b003      	add	sp, #12
 8008acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ad0:	f000 b8de 	b.w	8008c90 <__malloc_unlock>
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d908      	bls.n	8008aea <_free_r+0x46>
 8008ad8:	6825      	ldr	r5, [r4, #0]
 8008ada:	1961      	adds	r1, r4, r5
 8008adc:	428b      	cmp	r3, r1
 8008ade:	bf01      	itttt	eq
 8008ae0:	6819      	ldreq	r1, [r3, #0]
 8008ae2:	685b      	ldreq	r3, [r3, #4]
 8008ae4:	1949      	addeq	r1, r1, r5
 8008ae6:	6021      	streq	r1, [r4, #0]
 8008ae8:	e7ed      	b.n	8008ac6 <_free_r+0x22>
 8008aea:	461a      	mov	r2, r3
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	b10b      	cbz	r3, 8008af4 <_free_r+0x50>
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	d9fa      	bls.n	8008aea <_free_r+0x46>
 8008af4:	6811      	ldr	r1, [r2, #0]
 8008af6:	1855      	adds	r5, r2, r1
 8008af8:	42a5      	cmp	r5, r4
 8008afa:	d10b      	bne.n	8008b14 <_free_r+0x70>
 8008afc:	6824      	ldr	r4, [r4, #0]
 8008afe:	4421      	add	r1, r4
 8008b00:	1854      	adds	r4, r2, r1
 8008b02:	42a3      	cmp	r3, r4
 8008b04:	6011      	str	r1, [r2, #0]
 8008b06:	d1e0      	bne.n	8008aca <_free_r+0x26>
 8008b08:	681c      	ldr	r4, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	6053      	str	r3, [r2, #4]
 8008b0e:	4421      	add	r1, r4
 8008b10:	6011      	str	r1, [r2, #0]
 8008b12:	e7da      	b.n	8008aca <_free_r+0x26>
 8008b14:	d902      	bls.n	8008b1c <_free_r+0x78>
 8008b16:	230c      	movs	r3, #12
 8008b18:	6003      	str	r3, [r0, #0]
 8008b1a:	e7d6      	b.n	8008aca <_free_r+0x26>
 8008b1c:	6825      	ldr	r5, [r4, #0]
 8008b1e:	1961      	adds	r1, r4, r5
 8008b20:	428b      	cmp	r3, r1
 8008b22:	bf04      	itt	eq
 8008b24:	6819      	ldreq	r1, [r3, #0]
 8008b26:	685b      	ldreq	r3, [r3, #4]
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	bf04      	itt	eq
 8008b2c:	1949      	addeq	r1, r1, r5
 8008b2e:	6021      	streq	r1, [r4, #0]
 8008b30:	6054      	str	r4, [r2, #4]
 8008b32:	e7ca      	b.n	8008aca <_free_r+0x26>
 8008b34:	b003      	add	sp, #12
 8008b36:	bd30      	pop	{r4, r5, pc}
 8008b38:	20001cac 	.word	0x20001cac

08008b3c <sbrk_aligned>:
 8008b3c:	b570      	push	{r4, r5, r6, lr}
 8008b3e:	4e0e      	ldr	r6, [pc, #56]	; (8008b78 <sbrk_aligned+0x3c>)
 8008b40:	460c      	mov	r4, r1
 8008b42:	6831      	ldr	r1, [r6, #0]
 8008b44:	4605      	mov	r5, r0
 8008b46:	b911      	cbnz	r1, 8008b4e <sbrk_aligned+0x12>
 8008b48:	f000 f88c 	bl	8008c64 <_sbrk_r>
 8008b4c:	6030      	str	r0, [r6, #0]
 8008b4e:	4621      	mov	r1, r4
 8008b50:	4628      	mov	r0, r5
 8008b52:	f000 f887 	bl	8008c64 <_sbrk_r>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d00a      	beq.n	8008b70 <sbrk_aligned+0x34>
 8008b5a:	1cc4      	adds	r4, r0, #3
 8008b5c:	f024 0403 	bic.w	r4, r4, #3
 8008b60:	42a0      	cmp	r0, r4
 8008b62:	d007      	beq.n	8008b74 <sbrk_aligned+0x38>
 8008b64:	1a21      	subs	r1, r4, r0
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 f87c 	bl	8008c64 <_sbrk_r>
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	d101      	bne.n	8008b74 <sbrk_aligned+0x38>
 8008b70:	f04f 34ff 	mov.w	r4, #4294967295
 8008b74:	4620      	mov	r0, r4
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	20001cb0 	.word	0x20001cb0

08008b7c <_malloc_r>:
 8008b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b80:	1ccd      	adds	r5, r1, #3
 8008b82:	f025 0503 	bic.w	r5, r5, #3
 8008b86:	3508      	adds	r5, #8
 8008b88:	2d0c      	cmp	r5, #12
 8008b8a:	bf38      	it	cc
 8008b8c:	250c      	movcc	r5, #12
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	4607      	mov	r7, r0
 8008b92:	db01      	blt.n	8008b98 <_malloc_r+0x1c>
 8008b94:	42a9      	cmp	r1, r5
 8008b96:	d905      	bls.n	8008ba4 <_malloc_r+0x28>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	603b      	str	r3, [r7, #0]
 8008b9c:	2600      	movs	r6, #0
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ba4:	4e2e      	ldr	r6, [pc, #184]	; (8008c60 <_malloc_r+0xe4>)
 8008ba6:	f000 f86d 	bl	8008c84 <__malloc_lock>
 8008baa:	6833      	ldr	r3, [r6, #0]
 8008bac:	461c      	mov	r4, r3
 8008bae:	bb34      	cbnz	r4, 8008bfe <_malloc_r+0x82>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	f7ff ffc2 	bl	8008b3c <sbrk_aligned>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	4604      	mov	r4, r0
 8008bbc:	d14d      	bne.n	8008c5a <_malloc_r+0xde>
 8008bbe:	6834      	ldr	r4, [r6, #0]
 8008bc0:	4626      	mov	r6, r4
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d140      	bne.n	8008c48 <_malloc_r+0xcc>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4638      	mov	r0, r7
 8008bcc:	eb04 0803 	add.w	r8, r4, r3
 8008bd0:	f000 f848 	bl	8008c64 <_sbrk_r>
 8008bd4:	4580      	cmp	r8, r0
 8008bd6:	d13a      	bne.n	8008c4e <_malloc_r+0xd2>
 8008bd8:	6821      	ldr	r1, [r4, #0]
 8008bda:	3503      	adds	r5, #3
 8008bdc:	1a6d      	subs	r5, r5, r1
 8008bde:	f025 0503 	bic.w	r5, r5, #3
 8008be2:	3508      	adds	r5, #8
 8008be4:	2d0c      	cmp	r5, #12
 8008be6:	bf38      	it	cc
 8008be8:	250c      	movcc	r5, #12
 8008bea:	4629      	mov	r1, r5
 8008bec:	4638      	mov	r0, r7
 8008bee:	f7ff ffa5 	bl	8008b3c <sbrk_aligned>
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	d02b      	beq.n	8008c4e <_malloc_r+0xd2>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	442b      	add	r3, r5
 8008bfa:	6023      	str	r3, [r4, #0]
 8008bfc:	e00e      	b.n	8008c1c <_malloc_r+0xa0>
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	1b52      	subs	r2, r2, r5
 8008c02:	d41e      	bmi.n	8008c42 <_malloc_r+0xc6>
 8008c04:	2a0b      	cmp	r2, #11
 8008c06:	d916      	bls.n	8008c36 <_malloc_r+0xba>
 8008c08:	1961      	adds	r1, r4, r5
 8008c0a:	42a3      	cmp	r3, r4
 8008c0c:	6025      	str	r5, [r4, #0]
 8008c0e:	bf18      	it	ne
 8008c10:	6059      	strne	r1, [r3, #4]
 8008c12:	6863      	ldr	r3, [r4, #4]
 8008c14:	bf08      	it	eq
 8008c16:	6031      	streq	r1, [r6, #0]
 8008c18:	5162      	str	r2, [r4, r5]
 8008c1a:	604b      	str	r3, [r1, #4]
 8008c1c:	4638      	mov	r0, r7
 8008c1e:	f104 060b 	add.w	r6, r4, #11
 8008c22:	f000 f835 	bl	8008c90 <__malloc_unlock>
 8008c26:	f026 0607 	bic.w	r6, r6, #7
 8008c2a:	1d23      	adds	r3, r4, #4
 8008c2c:	1af2      	subs	r2, r6, r3
 8008c2e:	d0b6      	beq.n	8008b9e <_malloc_r+0x22>
 8008c30:	1b9b      	subs	r3, r3, r6
 8008c32:	50a3      	str	r3, [r4, r2]
 8008c34:	e7b3      	b.n	8008b9e <_malloc_r+0x22>
 8008c36:	6862      	ldr	r2, [r4, #4]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	bf0c      	ite	eq
 8008c3c:	6032      	streq	r2, [r6, #0]
 8008c3e:	605a      	strne	r2, [r3, #4]
 8008c40:	e7ec      	b.n	8008c1c <_malloc_r+0xa0>
 8008c42:	4623      	mov	r3, r4
 8008c44:	6864      	ldr	r4, [r4, #4]
 8008c46:	e7b2      	b.n	8008bae <_malloc_r+0x32>
 8008c48:	4634      	mov	r4, r6
 8008c4a:	6876      	ldr	r6, [r6, #4]
 8008c4c:	e7b9      	b.n	8008bc2 <_malloc_r+0x46>
 8008c4e:	230c      	movs	r3, #12
 8008c50:	603b      	str	r3, [r7, #0]
 8008c52:	4638      	mov	r0, r7
 8008c54:	f000 f81c 	bl	8008c90 <__malloc_unlock>
 8008c58:	e7a1      	b.n	8008b9e <_malloc_r+0x22>
 8008c5a:	6025      	str	r5, [r4, #0]
 8008c5c:	e7de      	b.n	8008c1c <_malloc_r+0xa0>
 8008c5e:	bf00      	nop
 8008c60:	20001cac 	.word	0x20001cac

08008c64 <_sbrk_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d06      	ldr	r5, [pc, #24]	; (8008c80 <_sbrk_r+0x1c>)
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4604      	mov	r4, r0
 8008c6c:	4608      	mov	r0, r1
 8008c6e:	602b      	str	r3, [r5, #0]
 8008c70:	f7f7 ff5e 	bl	8000b30 <_sbrk>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_sbrk_r+0x1a>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_sbrk_r+0x1a>
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	20001cb4 	.word	0x20001cb4

08008c84 <__malloc_lock>:
 8008c84:	4801      	ldr	r0, [pc, #4]	; (8008c8c <__malloc_lock+0x8>)
 8008c86:	f000 b809 	b.w	8008c9c <__retarget_lock_acquire_recursive>
 8008c8a:	bf00      	nop
 8008c8c:	20001cb8 	.word	0x20001cb8

08008c90 <__malloc_unlock>:
 8008c90:	4801      	ldr	r0, [pc, #4]	; (8008c98 <__malloc_unlock+0x8>)
 8008c92:	f000 b804 	b.w	8008c9e <__retarget_lock_release_recursive>
 8008c96:	bf00      	nop
 8008c98:	20001cb8 	.word	0x20001cb8

08008c9c <__retarget_lock_acquire_recursive>:
 8008c9c:	4770      	bx	lr

08008c9e <__retarget_lock_release_recursive>:
 8008c9e:	4770      	bx	lr

08008ca0 <_init>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	bf00      	nop
 8008ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca6:	bc08      	pop	{r3}
 8008ca8:	469e      	mov	lr, r3
 8008caa:	4770      	bx	lr

08008cac <_fini>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	bf00      	nop
 8008cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cb2:	bc08      	pop	{r3}
 8008cb4:	469e      	mov	lr, r3
 8008cb6:	4770      	bx	lr
